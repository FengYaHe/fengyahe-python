from PIL import Image
import numpy as np
import cv2 as cv
import os
import sys
import keyboard
import time
import copy

class redirect:
    content = ""
    def write(self,str):
        self.content += str
    def flush(self):
        self.content = ""
    
#outputsize
rsz = 2
fpsset = 60
speedset = 1
ghopturn = 0

#showimg
showimgar = [0,0,1,1,1,1,0,0,  0,1,1,0,0,0,1,1,  0,0,1,1,1,1,1,0,  0,1,1,0,0,0,1,1,
             0,1,1,0,0,1,1,0,  0,1,1,0,0,0,1,1,  0,1,1,0,0,0,1,1,  0,1,1,0,0,0,1,1,
             0,1,1,0,0,0,0,0,  0,1,1,0,0,0,1,1,  0,1,1,0,0,0,1,1,  0,1,1,0,1,0,1,1,
             0,0,1,1,1,1,1,0,  0,1,1,1,1,1,1,1,  0,1,1,0,0,0,1,1,  0,1,1,1,1,1,1,1,
             0,0,0,0,0,0,1,1,  0,1,1,0,0,0,1,1,  0,1,1,0,0,0,1,1,  0,1,1,1,1,1,1,1,
             0,1,1,0,0,0,1,1,  0,1,1,0,0,0,1,1,  0,1,1,0,0,0,1,1,  0,1,1,1,0,1,1,1,
             0,0,1,1,1,1,1,0,  0,1,1,0,0,0,1,1,  0,0,1,1,1,1,1,0,  0,1,1,0,0,0,1,1,
             0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0]
showimg = np.zeros((1*8, 4*8, 4), np.uint8)
for i in range(0,4*8):
    for j in range(0,1*8):
        if showimgar[i+j*4*8]==0:
            showimg[j][i]=(0,0,0,255)#black
        else: showimg[j][i]=(255,255,255,255)#white

#blinkyimg
blinkyimgar = [0,1,1,1,1,1,1,0,  0,0,1,1,0,0,0,0,  0,0,1,1,1,1,1,1,  0,1,1,0,0,0,1,1,  0,1,1,0,0,0,1,1,  0,0,1,1,0,0,1,1,
               0,1,1,0,0,0,1,1,  0,0,1,1,0,0,0,0,  0,0,0,0,1,1,0,0,  0,1,1,1,0,0,1,1,  0,1,1,0,0,1,1,0,  0,0,1,1,0,0,1,1,
               0,1,1,0,0,0,1,1,  0,0,1,1,0,0,0,0,  0,0,0,0,1,1,0,0,  0,1,1,1,1,0,1,1,  0,1,1,0,1,1,0,0,  0,0,1,1,0,0,1,1,
               0,1,1,1,1,1,1,0,  0,0,1,1,0,0,0,0,  0,0,0,0,1,1,0,0,  0,1,1,1,1,1,1,1,  0,1,1,1,1,0,0,0,  0,0,0,1,1,1,1,0,
               0,1,1,0,0,0,1,1,  0,0,1,1,0,0,0,0,  0,0,0,0,1,1,0,0,  0,1,1,0,1,1,1,1,  0,1,1,1,1,1,0,0,  0,0,0,0,1,1,0,0,
               0,1,1,0,0,0,1,1,  0,0,1,1,0,0,0,0,  0,0,0,0,1,1,0,0,  0,1,1,0,0,1,1,1,  0,1,1,0,1,1,1,0,  0,0,0,0,1,1,0,0,
               0,1,1,1,1,1,1,0,  0,0,1,1,1,1,1,1,  0,0,1,1,1,1,1,1,  0,1,1,0,0,0,1,1,  0,1,1,0,0,1,1,1,  0,0,0,0,1,1,0,0,
               0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0]
blinkyimg = np.zeros((1*8, 6*8, 4), np.uint8)
for i in range(0,6*8):
    for j in range(0,1*8):
        if blinkyimgar[i+j*6*8]==0:
            blinkyimg[j][i]=(0,0,0,255)#black
        else: blinkyimg[j][i]=(0,0,255,255)#red
        
#elroyimg
elroyimgar = [0,0,1,1,1,1,1,1,  0,0,1,1,0,0,0,0,  0,1,1,1,1,1,1,0,  0,0,1,1,1,1,1,0,  0,0,1,1,0,0,1,1,
              0,0,1,1,0,0,0,0,  0,0,1,1,0,0,0,0,  0,1,1,0,0,0,1,1,  0,1,1,0,0,0,1,1,  0,0,1,1,0,0,1,1,
              0,0,1,1,0,0,0,0,  0,0,1,1,0,0,0,0,  0,1,1,0,0,0,1,1,  0,1,1,0,0,0,1,1,  0,0,1,1,0,0,1,1,
              0,0,1,1,1,1,1,0,  0,0,1,1,0,0,0,0,  0,1,1,1,1,1,1,0,  0,1,1,0,0,0,1,1,  0,0,0,1,1,1,1,0,
              0,0,1,1,0,0,0,0,  0,0,1,1,0,0,0,0,  0,1,1,1,1,1,0,0,  0,1,1,0,0,0,1,1,  0,0,0,0,1,1,0,0,
              0,0,1,1,0,0,0,0,  0,0,1,1,0,0,0,0,  0,1,1,0,1,1,1,0,  0,1,1,0,0,0,1,1,  0,0,0,0,1,1,0,0,
              0,0,1,1,1,1,1,1,  0,0,1,1,1,1,1,1,  0,1,1,0,0,1,1,1,  0,0,1,1,1,1,1,0,  0,0,0,0,1,1,0,0,
              0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0]
elroy1img = np.zeros((1*8, 5*8, 4), np.uint8)
elroy2img = np.zeros((1*8, 5*8, 4), np.uint8)
for i in range(0,5*8):
    for j in range(0,1*8):
        if elroyimgar[i+j*5*8]==0:
            elroy1img[j][i]=(0,0,0,255)#black
            elroy2img[j][i]=(0,0,0,255)#black
        else:
            elroy1img[j][i]=(0,0,255,255)#red
            elroy2img[j][i]=(0,0,175,255)#red
        
#pinkyimg
pinkyimgar = [0,1,1,1,1,1,1,0,  0,0,1,1,1,1,1,1,  0,1,1,0,0,0,1,1,  0,1,1,0,0,0,1,1,  0,0,1,1,0,0,1,1,
              0,1,1,0,0,0,1,1,  0,0,0,0,1,1,0,0,  0,1,1,1,0,0,1,1,  0,1,1,0,0,1,1,0,  0,0,1,1,0,0,1,1,
              0,1,1,0,0,0,1,1,  0,0,0,0,1,1,0,0,  0,1,1,1,1,0,1,1,  0,1,1,0,1,1,0,0,  0,0,1,1,0,0,1,1,
              0,1,1,0,0,0,1,1,  0,0,0,0,1,1,0,0,  0,1,1,1,1,1,1,1,  0,1,1,1,1,0,0,0,  0,0,0,1,1,1,1,0,
              0,1,1,1,1,1,1,0,  0,0,0,0,1,1,0,0,  0,1,1,0,1,1,1,1,  0,1,1,1,1,1,0,0,  0,0,0,0,1,1,0,0,
              0,1,1,0,0,0,0,0,  0,0,0,0,1,1,0,0,  0,1,1,0,0,1,1,1,  0,1,1,0,1,1,1,0,  0,0,0,0,1,1,0,0,
              0,1,1,0,0,0,0,0,  0,0,1,1,1,1,1,1,  0,1,1,0,0,0,1,1,  0,1,1,0,0,1,1,1,  0,0,0,0,1,1,0,0,
              0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0]
pinkyimg = np.zeros((1*8, 5*8, 4), np.uint8)
for i in range(0,5*8):
    for j in range(0,1*8):
        if pinkyimgar[i+j*5*8]==0:
            pinkyimg[j][i]=(0,0,0,255)#black
        else: pinkyimg[j][i]=(200,200,255,255)#pink

#inkyimg
inkyimgar = [0,0,1,1,1,1,1,1,  0,1,1,0,0,0,1,1,  0,1,1,0,0,0,1,1,  0,0,1,1,0,0,1,1,
             0,0,0,0,1,1,0,0,  0,1,1,1,0,0,1,1,  0,1,1,0,0,1,1,0,  0,0,1,1,0,0,1,1,
             0,0,0,0,1,1,0,0,  0,1,1,1,1,0,1,1,  0,1,1,0,1,1,0,0,  0,0,1,1,0,0,1,1,
             0,0,0,0,1,1,0,0,  0,1,1,1,1,1,1,1,  0,1,1,1,1,0,0,0,  0,0,0,1,1,1,1,0,
             0,0,0,0,1,1,0,0,  0,1,1,0,1,1,1,1,  0,1,1,1,1,1,0,0,  0,0,0,0,1,1,0,0,
             0,0,0,0,1,1,0,0,  0,1,1,0,0,1,1,1,  0,1,1,0,1,1,1,0,  0,0,0,0,1,1,0,0,
             0,0,1,1,1,1,1,1,  0,1,1,0,0,0,1,1,  0,1,1,0,0,1,1,1,  0,0,0,0,1,1,0,0,
             0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0]
inkyimg = np.zeros((1*8, 4*8, 4), np.uint8)
for i in range(0,4*8):
    for j in range(0,1*8):
        if inkyimgar[i+j*4*8]==0:
            inkyimg[j][i]=(0,0,0,255)#black
        else: inkyimg[j][i]=(255,255,0,255)#cyan

#clydeimg
clydeimgar = [0,0,0,1,1,1,1,0,  0,0,1,1,0,0,0,0,  0,0,1,1,0,0,1,1,  0,1,1,1,1,1,0,0,  0,0,1,1,1,1,1,1,
              0,0,1,1,0,0,1,1,  0,0,1,1,0,0,0,0,  0,0,1,1,0,0,1,1,  0,1,1,0,0,1,1,0,  0,0,1,1,0,0,0,0,
              0,1,1,0,0,0,0,0,  0,0,1,1,0,0,0,0,  0,0,1,1,0,0,1,1,  0,1,1,0,0,0,1,1,  0,0,1,1,0,0,0,0,
              0,1,1,0,0,0,0,0,  0,0,1,1,0,0,0,0,  0,0,0,1,1,1,1,0,  0,1,1,0,0,0,1,1,  0,0,1,1,1,1,1,0,
              0,1,1,0,0,0,0,0,  0,0,1,1,0,0,0,0,  0,0,0,0,1,1,0,0,  0,1,1,0,0,0,1,1,  0,0,1,1,0,0,0,0,
              0,0,1,1,0,0,1,1,  0,0,1,1,0,0,0,0,  0,0,0,0,1,1,0,0,  0,1,1,0,0,1,1,0,  0,0,1,1,0,0,0,0,
              0,0,0,0,1,1,1,0,  0,0,1,1,1,1,1,1,  0,0,0,0,1,1,0,0,  0,1,1,1,1,1,0,0,  0,0,1,1,1,1,1,1,
              0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0]
clydeimg = np.zeros((1*8, 5*8, 4), np.uint8)
for i in range(0,5*8):
    for j in range(0,1*8):
        if clydeimgar[i+j*5*8]==0:
            clydeimg[j][i]=(0,0,0,255)#black
        else: clydeimg[j][i]=(0,200,255,255)#orange

#godmodeonimg
godmodeonimgar = [0,0,0,1,1,1,1,1,  0,0,1,1,1,1,1,0,  0,1,1,1,1,1,0,0,  0,0,0,0,0,0,  0,1,1,0,0,0,1,1,  0,0,1,1,1,1,1,0,  0,1,1,1,1,1,0,0,  0,0,1,1,1,1,1,1,  0,0,0,0,0,0,  0,0,1,1,1,1,1,0,  0,1,1,0,0,0,1,1,
                  0,0,1,1,0,0,0,0,  0,1,1,0,0,0,1,1,  0,1,1,0,0,1,1,0,  0,0,0,0,0,0,  0,1,1,1,0,1,1,1,  0,1,1,0,0,0,1,1,  0,1,1,0,0,1,1,0,  0,0,1,1,0,0,0,0,  0,0,0,0,0,0,  0,1,1,0,0,0,1,1,  0,1,1,1,0,0,1,1,
                  0,1,1,0,0,0,0,0,  0,1,1,0,0,0,1,1,  0,1,1,0,0,0,1,1,  0,0,0,0,0,0,  0,1,1,1,1,1,1,1,  0,1,1,0,0,0,1,1,  0,1,1,0,0,0,1,1,  0,0,1,1,0,0,0,0,  0,0,0,0,0,0,  0,1,1,0,0,0,1,1,  0,1,1,1,1,0,1,1,
                  0,1,1,0,0,1,1,1,  0,1,1,0,0,0,1,1,  0,1,1,0,0,0,1,1,  0,0,0,0,0,0,  0,1,1,1,1,1,1,1,  0,1,1,0,0,0,1,1,  0,1,1,0,0,0,1,1,  0,0,1,1,1,1,1,0,  0,0,0,0,0,0,  0,1,1,0,0,0,1,1,  0,1,1,1,1,1,1,1,
                  0,1,1,0,0,0,1,1,  0,1,1,0,0,0,1,1,  0,1,1,0,0,0,1,1,  0,0,0,0,0,0,  0,1,1,0,1,0,1,1,  0,1,1,0,0,0,1,1,  0,1,1,0,0,0,1,1,  0,0,1,1,0,0,0,0,  0,0,0,0,0,0,  0,1,1,0,0,0,1,1,  0,1,1,0,1,1,1,1,
                  0,0,1,1,0,0,1,1,  0,1,1,0,0,0,1,1,  0,1,1,0,0,1,1,0,  0,0,0,0,0,0,  0,1,1,0,0,0,1,1,  0,1,1,0,0,0,1,1,  0,1,1,0,0,1,1,0,  0,0,1,1,0,0,0,0,  0,0,0,0,0,0,  0,1,1,0,0,0,1,1,  0,1,1,0,0,1,1,1,
                  0,0,0,1,1,1,1,1,  0,0,1,1,1,1,1,0,  0,1,1,1,1,1,0,0,  0,0,0,0,0,0,  0,1,1,0,0,0,1,1,  0,0,1,1,1,1,1,0,  0,1,1,1,1,1,0,0,  0,0,1,1,1,1,1,1,  0,0,0,0,0,0,  0,0,1,1,1,1,1,0,  0,1,1,0,0,0,1,1,
                  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0]
godmodeonimg = np.zeros((1*8, 11*8-4, 4), np.uint8)
for i in range(0,11*8-4):
    for j in range(0,1*8):
        if godmodeonimgar[i+j*(11*8-4)]==0:
            godmodeonimg[j][i]=(0,0,0,255)#black
        else: godmodeonimg[j][i]=(0,255,255,255)#yellow

#memo1img
memo1imgar = [0,1,1,0,0,0,1,1,  0,0,0,1,1,1,0,0,  0,0,1,1,1,1,0,0,  0,1,1,1,1,1,0,0,  0,0,0,0,0,0,0,0,  0,0,2,2,2,2,2,2,  0,0,2,2,2,2,2,0,  0,0,0,0,0,0,0,0,  0,2,2,0,0,0,2,2,  0,0,2,2,2,2,2,0,  0,2,2,0,0,0,2,2,  0,0,2,2,2,2,2,2,
              0,1,1,0,0,0,1,1,  0,0,1,1,0,1,1,0,  0,1,1,0,0,1,1,0,  0,1,1,0,0,1,1,0,  0,0,0,0,0,0,0,0,  0,0,0,0,2,2,0,0,  0,2,2,0,0,0,2,2,  0,0,0,0,0,0,0,0,  0,2,2,2,0,2,2,2,  0,2,2,0,0,0,2,2,  0,2,2,0,0,0,2,2,  0,0,2,2,0,0,0,0,
              0,1,1,0,1,0,1,1,  0,1,1,0,0,0,1,1,  0,1,1,0,0,0,0,0,  0,1,1,0,0,0,1,1,  0,0,0,0,0,0,0,0,  0,0,0,0,2,2,0,0,  0,2,2,0,0,0,2,2,  0,0,0,0,0,0,0,0,  0,2,2,2,2,2,2,2,  0,2,2,0,0,0,2,2,  0,2,2,0,0,0,2,2,  0,0,2,2,0,0,0,0,
              0,1,1,1,1,1,1,1,  0,1,1,0,0,0,1,1,  0,0,1,1,1,1,1,0,  0,1,1,0,0,0,1,1,  0,0,0,0,0,0,0,0,  0,0,0,0,2,2,0,0,  0,2,2,0,0,0,2,2,  0,0,0,0,0,0,0,0,  0,2,2,2,2,2,2,2,  0,2,2,0,0,0,2,2,  0,2,2,2,0,2,2,2,  0,0,2,2,2,2,2,0,
              0,1,1,1,1,1,1,1,  0,1,1,1,1,1,1,1,  0,0,0,0,0,0,1,1,  0,1,1,0,0,0,1,1,  0,0,0,0,0,0,0,0,  0,0,0,0,2,2,0,0,  0,2,2,0,0,0,2,2,  0,0,0,0,0,0,0,0,  0,2,2,0,2,0,2,2,  0,2,2,0,0,0,2,2,  0,0,2,2,2,2,2,0,  0,0,2,2,0,0,0,0,
              0,1,1,1,0,1,1,1,  0,1,1,0,0,0,1,1,  0,1,1,0,0,0,1,1,  0,1,1,0,0,1,1,0,  0,0,0,0,0,0,0,0,  0,0,0,0,2,2,0,0,  0,2,2,0,0,0,2,2,  0,0,0,0,0,0,0,0,  0,2,2,0,0,0,2,2,  0,2,2,0,0,0,2,2,  0,0,0,2,2,2,0,0,  0,0,2,2,0,0,0,0,
              0,1,1,0,0,0,1,1,  0,1,1,0,0,0,1,1,  0,0,1,1,1,1,1,0,  0,1,1,1,1,1,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,2,2,0,0,  0,0,2,2,2,2,2,0,  0,0,0,0,0,0,0,0,  0,2,2,0,0,0,2,2,  0,0,2,2,2,2,2,0,  0,0,0,0,2,0,0,0,  0,0,2,2,2,2,2,2,
              0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0]
memo1img = np.zeros((1*8, 12*8, 4), np.uint8)
for i in range(0,12*8):
    for j in range(0,1*8):
        if memo1imgar[i+j*12*8]==0:
            memo1img[j][i]=(0,0,0,255)#black
        elif memo1imgar[i+j*12*8]==1:
            memo1img[j][i]=(0,255,255,255)#yellow
        else:
            memo1img[j][i]=(255,255,0,255)#cyan

#memo2img
memo2imgar = [0,1,1,1,1,1,1,0,  0,0,0,0,0,0,0,0,  0,0,2,2,2,2,2,2,  0,0,2,2,2,2,2,0,  0,0,0,0,0,0,0,0,  0,0,2,2,2,2,2,2,  0,2,2,0,0,0,2,2,  0,0,2,2,2,2,2,2,  0,0,2,2,2,2,2,2,  0,0,0,0,0,0,0,0,  0,0,0,2,2,2,2,2,  0,0,0,2,2,2,0,0,  0,2,2,0,0,0,2,2,  0,0,2,2,2,2,2,2,
              0,1,1,0,0,0,1,1,  0,0,0,0,0,0,0,0,  0,0,0,0,2,2,0,0,  0,2,2,0,0,0,2,2,  0,0,0,0,0,0,0,0,  0,0,2,2,0,0,0,0,  0,2,2,2,0,2,2,2,  0,0,0,0,2,2,0,0,  0,0,0,0,2,2,0,0,  0,0,0,0,0,0,0,0,  0,0,2,2,0,0,0,0,  0,0,2,2,0,2,2,0,  0,2,2,2,0,2,2,2,  0,0,2,2,0,0,0,0,
              0,1,1,0,0,0,1,1,  0,0,0,0,0,0,0,0,  0,0,0,0,2,2,0,0,  0,2,2,0,0,0,2,2,  0,0,0,0,0,0,0,0,  0,0,2,2,0,0,0,0,  0,0,2,2,2,2,2,0,  0,0,0,0,2,2,0,0,  0,0,0,0,2,2,0,0,  0,0,0,0,0,0,0,0,  0,2,2,0,0,0,0,0,  0,2,2,0,0,0,2,2,  0,2,2,2,2,2,2,2,  0,0,2,2,0,0,0,0,
              0,1,1,0,0,0,1,1,  0,0,0,0,0,0,0,0,  0,0,0,0,2,2,0,0,  0,2,2,0,0,0,2,2,  0,0,0,0,0,0,0,0,  0,0,2,2,2,2,2,0,  0,0,0,2,2,2,0,0,  0,0,0,0,2,2,0,0,  0,0,0,0,2,2,0,0,  0,0,0,0,0,0,0,0,  0,2,2,0,0,2,2,2,  0,2,2,0,0,0,2,2,  0,2,2,2,2,2,2,2,  0,0,2,2,2,2,2,0,
              0,1,1,1,1,1,1,0,  0,0,0,0,0,0,0,0,  0,0,0,0,2,2,0,0,  0,2,2,0,0,0,2,2,  0,0,0,0,0,0,0,0,  0,0,2,2,0,0,0,0,  0,0,2,2,2,2,2,0,  0,0,0,0,2,2,0,0,  0,0,0,0,2,2,0,0,  0,0,0,0,0,0,0,0,  0,2,2,0,0,0,2,2,  0,2,2,2,2,2,2,2,  0,2,2,0,2,0,2,2,  0,0,2,2,0,0,0,0,
              0,1,1,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,2,2,0,0,  0,2,2,0,0,0,2,2,  0,0,0,0,0,0,0,0,  0,0,2,2,0,0,0,0,  0,2,2,2,0,2,2,2,  0,0,0,0,2,2,0,0,  0,0,0,0,2,2,0,0,  0,0,0,0,0,0,0,0,  0,0,2,2,0,0,2,2,  0,2,2,0,0,0,2,2,  0,2,2,0,0,0,2,2,  0,0,2,2,0,0,0,0,
              0,1,1,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,2,2,0,0,  0,0,2,2,2,2,2,0,  0,0,0,0,0,0,0,0,  0,0,2,2,2,2,2,2,  0,2,2,0,0,0,2,2,  0,0,2,2,2,2,2,2,  0,0,0,0,2,2,0,0,  0,0,0,0,0,0,0,0,  0,0,0,2,2,2,2,2,  0,2,2,0,0,0,2,2,  0,2,2,0,0,0,2,2,  0,0,2,2,2,2,2,2,
              0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,]
memo2img = np.zeros((1*8, 14*8, 4), np.uint8)
for i in range(0,14*8):
    for j in range(0,1*8):
        if memo2imgar[i+j*14*8]==0:
            memo2img[j][i]=(0,0,0,255)#black
        elif memo2imgar[i+j*14*8]==1:
            memo2img[j][i]=(0,255,255,255)#yellow
        else:
            memo2img[j][i]=(255,255,0,255)#cyan
   
#1upimg
lupimgar = [0,0,0,0,1,1,0,0,  0,1,1,0,0,0,1,1,  0,1,1,1,1,1,1,0,
            0,0,0,1,1,1,0,0,  0,1,1,0,0,0,1,1,  0,1,1,0,0,0,1,1,
            0,0,0,0,1,1,0,0,  0,1,1,0,0,0,1,1,  0,1,1,0,0,0,1,1,
            0,0,0,0,1,1,0,0,  0,1,1,0,0,0,1,1,  0,1,1,0,0,0,1,1,
            0,0,0,0,1,1,0,0,  0,1,1,0,0,0,1,1,  0,1,1,1,1,1,1,0,
            0,0,0,0,1,1,0,0,  0,1,1,0,0,0,1,1,  0,1,1,0,0,0,0,0,
            0,0,1,1,1,1,1,1,  0,0,1,1,1,1,1,0,  0,1,1,0,0,0,0,0,
            0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0]
lupimg = np.zeros((1*8, 3*8, 4), np.uint8)
for i in range(0,3*8):
    for j in range(0,1*8):
        if lupimgar[i+j*3*8]==0:
            lupimg[j][i]=(0,0,0,255)#black
        else: lupimg[j][i]=(255,255,255,255)#white

#highimg
highimgar = [0,1,1,0,0,0,1,1,  0,0,1,1,1,1,1,1,  0,0,0,1,1,1,1,1,  0,1,1,0,0,0,1,1,
             0,1,1,0,0,0,1,1,  0,0,0,0,1,1,0,0,  0,0,1,1,0,0,0,0,  0,1,1,0,0,0,1,1,
             0,1,1,0,0,0,1,1,  0,0,0,0,1,1,0,0,  0,1,1,0,0,0,0,0,  0,1,1,0,0,0,1,1,
             0,1,1,1,1,1,1,1,  0,0,0,0,1,1,0,0,  0,1,1,0,0,1,1,1,  0,1,1,1,1,1,1,1,
             0,1,1,0,0,0,1,1,  0,0,0,0,1,1,0,0,  0,1,1,0,0,0,1,1,  0,1,1,0,0,0,1,1,
             0,1,1,0,0,0,1,1,  0,0,0,0,1,1,0,0,  0,0,1,1,0,0,1,1,  0,1,1,0,0,0,1,1,
             0,1,1,0,0,0,1,1,  0,0,1,1,1,1,1,1,  0,0,0,1,1,1,1,1,  0,1,1,0,0,0,1,1,
             0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0]
highimg = np.zeros((1*8, 4*8, 4), np.uint8)
for i in range(0,4*8):
    for j in range(0,1*8):
        if highimgar[i+j*4*8]==0:
            highimg[j][i]=(0,0,0,255)#black
        else: highimg[j][i]=(255,255,255,255)#white

#scoreimg
scoreimgar = [0,0,1,1,1,1,0,0,  0,0,0,1,1,1,1,0,  0,0,1,1,1,1,1,0,  0,1,1,1,1,1,1,0,  0,0,1,1,1,1,1,1,
              0,1,1,0,0,1,1,0,  0,0,1,1,0,0,1,1,  0,1,1,0,0,0,1,1,  0,1,1,0,0,0,1,1,  0,0,1,1,0,0,0,0,
              0,1,1,0,0,0,0,0,  0,1,1,0,0,0,0,0,  0,1,1,0,0,0,1,1,  0,1,1,0,0,0,1,1,  0,0,1,1,0,0,0,0,
              0,0,1,1,1,1,1,0,  0,1,1,0,0,0,0,0,  0,1,1,0,0,0,1,1,  0,1,1,0,0,1,1,1,  0,0,1,1,1,1,1,0,
              0,0,0,0,0,0,1,1,  0,1,1,0,0,0,0,0,  0,1,1,0,0,0,1,1,  0,1,1,1,1,1,0,0,  0,0,1,1,0,0,0,0,
              0,1,1,0,0,0,1,1,  0,0,1,1,0,0,1,1,  0,1,1,0,0,0,1,1,  0,1,1,0,1,1,1,0,  0,0,1,1,0,0,0,0,
              0,0,1,1,1,1,1,0,  0,0,0,1,1,1,1,0,  0,0,1,1,1,1,1,0,  0,1,1,0,0,1,1,1,  0,0,1,1,1,1,1,1,
              0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0]
scoreimg = np.zeros((1*8, 5*8, 4), np.uint8)
for i in range(0,5*8):
    for j in range(0,1*8):
        if scoreimgar[i+j*5*8]==0:
            scoreimg[j][i]=(0,0,0,255)#black
        else: scoreimg[j][i]=(255,255,255,255)#white

#levelimg
levelimgar = [0,0,1,1,0,0,0,0,  0,0,1,1,1,1,1,1,  0,1,1,0,0,0,1,1,  0,0,1,1,1,1,1,1,  0,0,1,1,0,0,0,0,
              0,0,1,1,0,0,0,0,  0,0,1,1,0,0,0,0,  0,1,1,0,0,0,1,1,  0,0,1,1,0,0,0,0,  0,0,1,1,0,0,0,0,
              0,0,1,1,0,0,0,0,  0,0,1,1,0,0,0,0,  0,1,1,0,0,0,1,1,  0,0,1,1,0,0,0,0,  0,0,1,1,0,0,0,0,
              0,0,1,1,0,0,0,0,  0,0,1,1,1,1,1,0,  0,1,1,1,0,1,1,1,  0,0,1,1,1,1,1,0,  0,0,1,1,0,0,0,0,
              0,0,1,1,0,0,0,0,  0,0,1,1,0,0,0,0,  0,0,1,1,1,1,1,0,  0,0,1,1,0,0,0,0,  0,0,1,1,0,0,0,0,
              0,0,1,1,0,0,0,0,  0,0,1,1,0,0,0,0,  0,0,0,1,1,1,0,0,  0,0,1,1,0,0,0,0,  0,0,1,1,0,0,0,0,
              0,0,1,1,1,1,1,1,  0,0,1,1,1,1,1,1,  0,0,0,0,1,0,0,0,  0,0,1,1,1,1,1,1,  0,0,1,1,1,1,1,1,
              0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0]
levelimg = np.zeros((1*8, 5*8, 4), np.uint8)
for i in range(0,5*8):
    for j in range(0,1*8):
        if levelimgar[i+j*5*8]==0:
            levelimg[j][i]=(0,0,0,255)#black
        else: levelimg[j][i]=(255,255,255,255)#white

#inwallleftimg
inwallleftimgar = [0,0,0,1,0,0,0,0,
                   0,0,0,1,0,0,0,0,
                   0,0,0,1,0,0,0,0,
                   0,0,0,1,0,0,0,0,
                   0,0,0,1,0,0,0,0,
                   0,0,0,1,0,0,0,0,
                   0,0,0,1,0,0,0,0,
                   0,0,0,1,0,0,0,0]
inwallleftimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if inwallleftimgar[i+j*1*8]==0:
            inwallleftimg[j][i]=(0,0,0,255)#black
        else: inwallleftimg[j][i]=(255,0,0,255)#blue

#inwallrightimg
inwallrightimgar = [0,0,0,0,1,0,0,0,
                    0,0,0,0,1,0,0,0,
                    0,0,0,0,1,0,0,0,
                    0,0,0,0,1,0,0,0,
                    0,0,0,0,1,0,0,0,
                    0,0,0,0,1,0,0,0,
                    0,0,0,0,1,0,0,0,
                    0,0,0,0,1,0,0,0]
inwallrightimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if inwallrightimgar[i+j*1*8]==0:
            inwallrightimg[j][i]=(0,0,0,255)#black
        else: inwallrightimg[j][i]=(255,0,0,255)#blue

#inwallupimg
inwallupimgar = [0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,0,0,
                 1,1,1,1,1,1,1,1,
                 0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,0,0]
inwallupimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if inwallupimgar[i+j*1*8]==0:
            inwallupimg[j][i]=(0,0,0,255)#black
        else: inwallupimg[j][i]=(255,0,0,255)#blue

#inwalldownimg
inwalldownimgar = [0,0,0,0,0,0,0,0,
                   0,0,0,0,0,0,0,0,
                   0,0,0,0,0,0,0,0,
                   0,0,0,0,0,0,0,0,
                   1,1,1,1,1,1,1,1,
                   0,0,0,0,0,0,0,0,
                   0,0,0,0,0,0,0,0,
                   0,0,0,0,0,0,0,0]
inwalldownimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if inwalldownimgar[i+j*1*8]==0:
            inwalldownimg[j][i]=(0,0,0,255)#black
        else: inwalldownimg[j][i]=(255,0,0,255)#blue

#inwallulimg
inwallulimgar = [0,0,0,1,0,0,0,0,
                 0,0,0,1,0,0,0,0,
                 0,0,1,0,0,0,0,0,
                 1,1,0,0,0,0,0,0,
                 0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,0,0]
inwallulimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if inwallulimgar[i+j*1*8]==0:
            inwallulimg[j][i]=(0,0,0,255)#black
        else: inwallulimg[j][i]=(255,0,0,255)#blue

#inwallurimg
inwallurimgar = [0,0,0,0,1,0,0,0,
                 0,0,0,0,1,0,0,0,
                 0,0,0,0,0,1,0,0,
                 0,0,0,0,0,0,1,1,
                 0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,0,0]
inwallurimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if inwallurimgar[i+j*1*8]==0:
            inwallurimg[j][i]=(0,0,0,255)#black
        else: inwallurimg[j][i]=(255,0,0,255)#blue

#inwalldrimg
inwalldrimgar = [0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,1,1,
                 0,0,0,0,0,1,0,0,
                 0,0,0,0,1,0,0,0,
                 0,0,0,0,1,0,0,0]
inwalldrimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if inwalldrimgar[i+j*1*8]==0:
            inwalldrimg[j][i]=(0,0,0,255)#black
        else: inwalldrimg[j][i]=(255,0,0,255)#blue

#inwalldlimg
inwalldlimgar = [0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,0,0,
                 1,1,0,0,0,0,0,0,
                 0,0,1,0,0,0,0,0,
                 0,0,0,1,0,0,0,0,
                 0,0,0,1,0,0,0,0]
inwalldlimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if inwalldlimgar[i+j*1*8]==0:
            inwalldlimg[j][i]=(0,0,0,255)#black
        else: inwalldlimg[j][i]=(255,0,0,255)#blue

#inwalluliimg
inwalluliimgar = [0,0,0,0,1,0,0,0,
                  0,0,0,0,1,0,0,0,
                  0,0,0,0,1,0,0,0,
                  0,0,0,1,0,0,0,0,
                  1,1,1,0,0,0,0,0,
                  0,0,0,0,0,0,0,0,
                  0,0,0,0,0,0,0,0,
                  0,0,0,0,0,0,0,0]
inwalluliimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if inwalluliimgar[i+j*1*8]==0:
            inwalluliimg[j][i]=(0,0,0,255)#black
        else: inwalluliimg[j][i]=(255,0,0,255)#blue

#inwalluriimg
inwalluriimgar = [0,0,0,1,0,0,0,0,
                  0,0,0,1,0,0,0,0,
                  0,0,0,1,0,0,0,0,
                  0,0,0,0,1,0,0,0,
                  0,0,0,0,0,1,1,1,
                  0,0,0,0,0,0,0,0,
                  0,0,0,0,0,0,0,0,
                  0,0,0,0,0,0,0,0]
inwalluriimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if inwalluriimgar[i+j*1*8]==0:
            inwalluriimg[j][i]=(0,0,0,255)#black
        else: inwalluriimg[j][i]=(255,0,0,255)#blue

#inwalldriimg
inwalldriimgar = [0,0,0,0,0,0,0,0,
                  0,0,0,0,0,0,0,0,
                  0,0,0,0,0,0,0,0,
                  0,0,0,0,0,1,1,1,
                  0,0,0,0,1,0,0,0,
                  0,0,0,1,0,0,0,0,
                  0,0,0,1,0,0,0,0,
                  0,0,0,1,0,0,0,0]
inwalldriimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if inwalldriimgar[i+j*1*8]==0:
            inwalldriimg[j][i]=(0,0,0,255)#black
        else: inwalldriimg[j][i]=(255,0,0,255)#blue

#inwalldliimg
inwalldliimgar = [0,0,0,0,0,0,0,0,
                  0,0,0,0,0,0,0,0,
                  0,0,0,0,0,0,0,0,
                  1,1,1,0,0,0,0,0,
                  0,0,0,1,0,0,0,0,
                  0,0,0,0,1,0,0,0,
                  0,0,0,0,1,0,0,0,
                  0,0,0,0,1,0,0,0]
inwalldliimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if inwalldliimgar[i+j*1*8]==0:
            inwalldliimg[j][i]=(0,0,0,255)#black
        else: inwalldliimg[j][i]=(255,0,0,255)#blue

#ouwallleftimg
ouwallleftimgar = [1,0,0,1,0,0,0,0,
                   1,0,0,1,0,0,0,0,
                   1,0,0,1,0,0,0,0,
                   1,0,0,1,0,0,0,0,
                   1,0,0,1,0,0,0,0,
                   1,0,0,1,0,0,0,0,
                   1,0,0,1,0,0,0,0,
                   1,0,0,1,0,0,0,0]
ouwallleftimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if ouwallleftimgar[i+j*1*8]==0:
            ouwallleftimg[j][i]=(0,0,0,255)#black
        else: ouwallleftimg[j][i]=(255,0,0,255)#blue

#ouwallrightimg
ouwallrightimgar = [0,0,0,0,1,0,0,1,
                    0,0,0,0,1,0,0,1,
                    0,0,0,0,1,0,0,1,
                    0,0,0,0,1,0,0,1,
                    0,0,0,0,1,0,0,1,
                    0,0,0,0,1,0,0,1,
                    0,0,0,0,1,0,0,1,
                    0,0,0,0,1,0,0,1]
ouwallrightimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if ouwallrightimgar[i+j*1*8]==0:
            ouwallrightimg[j][i]=(0,0,0,255)#black
        else: ouwallrightimg[j][i]=(255,0,0,255)#blue

#ouwallupimg
ouwallupimgar = [1,1,1,1,1,1,1,1,
                 0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,0,0,
                 1,1,1,1,1,1,1,1,
                 0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,0,0]
ouwallupimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if ouwallupimgar[i+j*1*8]==0:
            ouwallupimg[j][i]=(0,0,0,255)#black
        else: ouwallupimg[j][i]=(255,0,0,255)#blue

#ouwalldownimg
ouwalldownimgar = [0,0,0,0,0,0,0,0,
                   0,0,0,0,0,0,0,0,
                   0,0,0,0,0,0,0,0,
                   0,0,0,0,0,0,0,0,
                   1,1,1,1,1,1,1,1,
                   0,0,0,0,0,0,0,0,
                   0,0,0,0,0,0,0,0,
                   1,1,1,1,1,1,1,1]
ouwalldownimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if ouwalldownimgar[i+j*1*8]==0:
            ouwalldownimg[j][i]=(0,0,0,255)#black
        else: ouwalldownimg[j][i]=(255,0,0,255)#blue

#ouwallulimg
ouwallulimgar = [0,0,0,1,0,0,0,0,
                 0,0,0,1,0,0,0,0,
                 0,0,1,0,0,0,0,0,
                 1,1,0,0,0,0,0,0,
                 0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,0,0]
ouwallulimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if ouwallulimgar[i+j*1*8]==0:
            ouwallulimg[j][i]=(0,0,0,255)#black
        else: ouwallulimg[j][i]=(255,0,0,255)#blue

#ouwallurimg
ouwallurimgar = [0,0,0,0,1,0,0,0,
                 0,0,0,0,1,0,0,0,
                 0,0,0,0,0,1,0,0,
                 0,0,0,0,0,0,1,1,
                 0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,0,0]
ouwallurimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if ouwallurimgar[i+j*1*8]==0:
            ouwallurimg[j][i]=(0,0,0,255)#black
        else: ouwallurimg[j][i]=(255,0,0,255)#blue

#ouwalldrimg
ouwalldrimgar = [0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,1,1,
                 0,0,0,0,0,1,0,0,
                 0,0,0,0,1,0,0,0,
                 0,0,0,0,1,0,0,0]
ouwalldrimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if ouwalldrimgar[i+j*1*8]==0:
            ouwalldrimg[j][i]=(0,0,0,255)#black
        else: ouwalldrimg[j][i]=(255,0,0,255)#blue

#ouwalldlimg
ouwalldlimgar = [0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,0,0,
                 1,1,0,0,0,0,0,0,
                 0,0,1,0,0,0,0,0,
                 0,0,0,1,0,0,0,0,
                 0,0,0,1,0,0,0,0]
ouwalldlimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if ouwalldlimgar[i+j*1*8]==0:
            ouwalldlimg[j][i]=(0,0,0,255)#black
        else: ouwalldlimg[j][i]=(255,0,0,255)#blue

#ouwalluliimg
ouwalluliimgar = [0,0,0,0,1,0,0,1,
                  0,0,0,0,1,0,0,1,
                  0,0,0,0,1,0,0,1,
                  0,0,0,1,0,0,0,1,
                  1,1,1,0,0,0,1,0,
                  0,0,0,0,0,0,1,0,
                  0,0,0,0,1,1,0,0,
                  1,1,1,1,0,0,0,0]
ouwalluliimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if ouwalluliimgar[i+j*1*8]==0:
            ouwalluliimg[j][i]=(0,0,0,255)#black
        else: ouwalluliimg[j][i]=(255,0,0,255)#blue

#ouwalluriimg
ouwalluriimgar = [1,0,0,1,0,0,0,0,
                  1,0,0,1,0,0,0,0,
                  1,0,0,1,0,0,0,0,
                  1,0,0,0,1,0,0,0,
                  0,1,0,0,0,1,1,1,
                  0,1,0,0,0,0,0,0,
                  0,0,1,1,0,0,0,0,
                  0,0,0,0,1,1,1,1]
ouwalluriimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if ouwalluriimgar[i+j*1*8]==0:
            ouwalluriimg[j][i]=(0,0,0,255)#black
        else: ouwalluriimg[j][i]=(255,0,0,255)#blue

#ouwalldriimg
ouwalldriimgar = [0,0,0,0,1,1,1,1,
                  0,0,1,1,0,0,0,0,
                  0,1,0,0,0,0,0,0,
                  0,1,0,0,0,1,1,1,
                  1,0,0,0,1,0,0,0,
                  1,0,0,1,0,0,0,0,
                  1,0,0,1,0,0,0,0,
                  1,0,0,1,0,0,0,0]
ouwalldriimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if ouwalldriimgar[i+j*1*8]==0:
            ouwalldriimg[j][i]=(0,0,0,255)#black
        else: ouwalldriimg[j][i]=(255,0,0,255)#blue

#ouwalldliimg
ouwalldliimgar = [1,1,1,1,0,0,0,0,
                  0,0,0,0,1,1,0,0,
                  0,0,0,0,0,0,1,0,
                  1,1,1,0,0,0,1,0,
                  0,0,0,1,0,0,0,1,
                  0,0,0,0,1,0,0,1,
                  0,0,0,0,1,0,0,1,
                  0,0,0,0,1,0,0,1]
ouwalldliimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if ouwalldliimgar[i+j*1*8]==0:
            ouwalldliimg[j][i]=(0,0,0,255)#black
        else: ouwalldliimg[j][i]=(255,0,0,255)#blue

#gateimg
gateimgar = [0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,
             1,1,1,1,1,1,1,1,
             1,1,1,1,1,1,1,1,
             0,0,0,0,0,0,0,0]
gateimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if gateimgar[i+j*1*8]==0:
            gateimg[j][i]=(0,0,0,255)#black
        else: gateimg[j][i]=(200,200,255,255)#pink

#gatelimg
gatelimgar = [0,0,0,0,0,0,0,0,
              0,0,0,0,0,0,0,0,
              0,0,0,0,0,0,0,0,
              0,0,0,0,0,0,0,0,
              1,1,1,1,0,0,0,0,
              0,0,0,1,2,2,2,2,
              0,0,0,1,2,2,2,2,
              1,1,1,1,0,0,0,0]
gatelimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if gatelimgar[i+j*1*8]==0:
            gatelimg[j][i]=(0,0,0,255)#black
        elif gatelimgar[i+j*1*8]==1:
            gatelimg[j][i]=(255,0,0,255)#blue
        else: gatelimg[j][i]=(200,200,255,255)#pink

#gaterimg
gaterimgar = [0,0,0,0,0,0,0,0,
              0,0,0,0,0,0,0,0,
              0,0,0,0,0,0,0,0,
              0,0,0,0,0,0,0,0,
              0,0,0,0,1,1,1,1,
              2,2,2,2,1,0,0,0,
              2,2,2,2,1,0,0,0,
              0,0,0,0,1,1,1,1]
gaterimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if gaterimgar[i+j*1*8]==0:
            gaterimg[j][i]=(0,0,0,255)#black
        elif gaterimgar[i+j*1*8]==1:
            gaterimg[j][i]=(255,0,0,255)#blue
        else: gaterimg[j][i]=(200,200,255,255)#pink

#roomulimg
roomulimgar = [1,0,0,1,0,0,0,0,
               0,0,0,1,0,0,0,0,
               0,0,0,1,0,0,0,0,
               1,1,1,1,0,0,0,0,
               0,0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,0]
roomulimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if roomulimgar[i+j*1*8]==0:
            roomulimg[j][i]=(0,0,0,255)#black
        else: roomulimg[j][i]=(255,0,0,255)#blue

#roomurimg
roomurimgar = [0,0,0,0,1,0,0,1,
               0,0,0,0,1,0,0,0,
               0,0,0,0,1,0,0,0,
               0,0,0,0,1,1,1,1,
               0,0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,0]
roomurimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if roomurimgar[i+j*1*8]==0:
            roomurimg[j][i]=(0,0,0,255)#black
        else: roomurimg[j][i]=(255,0,0,255)#blue

#roomdrimg
roomdrimgar = [0,0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,0,
               0,0,0,0,1,1,1,1,
               0,0,0,0,1,0,0,0,
               0,0,0,0,1,0,0,0,
               0,0,0,0,1,0,0,1]
roomdrimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if roomdrimgar[i+j*1*8]==0:
            roomdrimg[j][i]=(0,0,0,255)#black
        else: roomdrimg[j][i]=(255,0,0,255)#blue

#roomdlimg
roomdlimgar = [0,0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,0,
               1,1,1,1,0,0,0,0,
               0,0,0,1,0,0,0,0,
               0,0,0,1,0,0,0,0,
               1,0,0,1,0,0,0,0]
roomdlimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if roomdlimgar[i+j*1*8]==0:
            roomdlimg[j][i]=(0,0,0,255)#black
        else: roomdlimg[j][i]=(255,0,0,255)#blue

#iordlimg
iordlimgar = [0,0,0,0,0,0,0,1,
              0,0,0,0,0,0,0,1,
              0,0,0,0,0,0,0,1,
              1,1,1,0,0,0,0,1,
              0,0,0,1,0,0,0,1,
              0,0,0,0,1,0,0,1,
              0,0,0,0,1,0,0,1,
              0,0,0,0,1,0,0,1]
iordlimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if iordlimgar[i+j*1*8]==0:
            iordlimg[j][i]=(0,0,0,255)#black
        else: iordlimg[j][i]=(255,0,0,255)#blue

#iorulimg
iorulimgar = [0,0,0,0,1,0,0,1,
              0,0,0,0,1,0,0,1,
              0,0,0,0,1,0,0,1,
              0,0,0,1,0,0,0,1,
              1,1,1,0,0,0,0,1,
              0,0,0,0,0,0,0,1,
              0,0,0,0,0,0,0,1,
              0,0,0,0,0,0,0,1]
iorulimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if iorulimgar[i+j*1*8]==0:
            iorulimg[j][i]=(0,0,0,255)#black
        else: iorulimg[j][i]=(255,0,0,255)#blue

#ioldrimg
ioldrimgar = [1,0,0,0,0,0,0,0,
              1,0,0,0,0,0,0,0,
              1,0,0,0,0,0,0,0,
              1,0,0,0,0,1,1,1,
              1,0,0,0,1,0,0,0,
              1,0,0,1,0,0,0,0,
              1,0,0,1,0,0,0,0,
              1,0,0,1,0,0,0,0]
ioldrimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if ioldrimgar[i+j*1*8]==0:
            ioldrimg[j][i]=(0,0,0,255)#black
        else: ioldrimg[j][i]=(255,0,0,255)#blue

#iolurimg
iolurimgar = [1,0,0,1,0,0,0,0,
              1,0,0,1,0,0,0,0,
              1,0,0,1,0,0,0,0,
              1,0,0,0,1,0,0,0,
              1,0,0,0,0,1,1,1,
              1,0,0,0,0,0,0,0,
              1,0,0,0,0,0,0,0,
              1,0,0,0,0,0,0,0]
iolurimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if iolurimgar[i+j*1*8]==0:
            iolurimg[j][i]=(0,0,0,255)#black
        else: iolurimg[j][i]=(255,0,0,255)#blue

#ioudlimg
ioudlimgar = [1,1,1,1,1,1,1,1,
              0,0,0,0,0,0,0,0,
              0,0,0,0,0,0,0,0,
              1,1,1,0,0,0,0,0,
              0,0,0,1,0,0,0,0,
              0,0,0,0,1,0,0,0,
              0,0,0,0,1,0,0,0,
              0,0,0,0,1,0,0,0]
ioudlimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if ioudlimgar[i+j*1*8]==0:
            ioudlimg[j][i]=(0,0,0,255)#black
        else: ioudlimg[j][i]=(255,0,0,255)#blue

#iouldrimg
ioudrimgar = [1,1,1,1,1,1,1,1,
              0,0,0,0,0,0,0,0,
              0,0,0,0,0,0,0,0,
              0,0,0,0,0,1,1,1,
              0,0,0,0,1,0,0,0,
              0,0,0,1,0,0,0,0,
              0,0,0,1,0,0,0,0,
              0,0,0,1,0,0,0,0]
ioudrimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if ioudrimgar[i+j*1*8]==0:
            ioudrimg[j][i]=(0,0,0,255)#black
        else: ioudrimg[j][i]=(255,0,0,255)#blue

#mapbgimg
mapbgimg = np.zeros((36*8, 28*8, 4), np.uint8)
for i in range(0,28*8):
    for j in range(0,36*8):
        mapbgimg[j][i]=(0,0,0,255)#black
mapbgimgim = Image.fromarray(mapbgimg)

mapbgimgim.paste(Image.fromarray(lupimg),(3*8,0*8))
mapbgimgim.paste(Image.fromarray(highimg),(9*8,0*8))
mapbgimgim.paste(Image.fromarray(scoreimg),(14*8,0*8))
mapbgimgim.paste(Image.fromarray(levelimg),(22*8,0*8))
mapbgimgim.paste(Image.fromarray(gatelimg),(12*8,15*8))
mapbgimgim.paste(Image.fromarray(gateimg),(13*8,15*8))
mapbgimgim.paste(Image.fromarray(gateimg),(14*8,15*8))
mapbgimgim.paste(Image.fromarray(gaterimg),(15*8,15*8))
mapbgimgim.paste(Image.fromarray(roomdrimg),(10*8,15*8))
mapbgimgim.paste(Image.fromarray(roomdlimg),(17*8,15*8))
mapbgimgim.paste(Image.fromarray(roomurimg),(10*8,19*8))
mapbgimgim.paste(Image.fromarray(roomulimg),(17*8,19*8))
mapbgimgim.paste(Image.fromarray(iordlimg),(27*8,28*8))
mapbgimgim.paste(Image.fromarray(iorulimg),(27*8,27*8))
mapbgimgim.paste(Image.fromarray(ioldrimg),(0*8,28*8))
mapbgimgim.paste(Image.fromarray(iolurimg),(0*8,27*8))
mapbgimgim.paste(Image.fromarray(ioudlimg),(13*8,3*8))
mapbgimgim.paste(Image.fromarray(ioudrimg),(14*8,3*8))
row = 36
col = 28
pic_size = 8
mapwallar = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
             12, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9,
              3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4,
              3, 0,16, 6, 6,13, 0,16, 6, 6, 6,13, 0, 8, 7, 0,16, 6, 6, 6,13, 0,16, 6, 6,13, 0, 4,
              3, 0, 8, 0, 0, 7, 0, 8, 0, 0, 0, 7, 0, 8, 7, 0, 8, 0, 0, 0, 7, 0, 8, 0, 0, 7, 0, 4,
              3, 0,15, 5, 5,14, 0,15, 5, 5, 5,14, 0,15,14, 0,15, 5, 5, 5,14, 0,15, 5, 5,14, 0, 4,
              3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4,
              3, 0,16, 6, 6,13, 0,16,13, 0,16, 6, 6, 6, 6, 6, 6,13, 0,16,13, 0,16, 6, 6,13, 0, 4,
              3, 0,15, 5, 5,14, 0, 8, 7, 0,15, 5, 5,17,20, 5, 5,14, 0, 8, 7, 0,15, 5, 5,14, 0, 4,
              3, 0, 0, 0, 0, 0, 0, 8, 7, 0, 0, 0, 0, 8, 7, 0, 0, 0, 0, 8, 7, 0, 0, 0, 0, 0, 0, 4,
             11, 2, 2, 2, 2,13, 0, 8,19, 6, 6,13, 0, 8, 7, 0,16, 6, 6,18, 7, 0,16, 2, 2, 2, 2,10,
              0, 0, 0, 0, 0, 3, 0, 8,20, 5, 5,14, 0,15,14, 0,15, 5, 5,17, 7, 0, 4, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 3, 0, 8, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 7, 0, 4, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 3, 0, 8, 7, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 8, 7, 0, 4, 0, 0, 0, 0, 0,
              1, 1, 1, 1, 1,14, 0,15,14, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0,15,14, 0,15, 1, 1, 1, 1, 1,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              2, 2, 2, 2, 2,13, 0,16,13, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0,16,13, 0,16, 2, 2, 2, 2, 2,
              0, 0, 0, 0, 0, 3, 0, 8, 7, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 8, 7, 0, 4, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 3, 0, 8, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 7, 0, 4, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 3, 0, 8, 7, 0,16, 6, 6, 6, 6, 6, 6,13, 0, 8, 7, 0, 4, 0, 0, 0, 0, 0,
             12, 1, 1, 1, 1,14, 0,15,14, 0,15, 5, 5,17,20, 5, 5,14, 0,15,14, 0,15, 1, 1, 1, 1, 9,
              3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4,
              3, 0,16, 6, 6,13, 0,16, 6, 6, 6,13, 0, 8, 7, 0,16, 6, 6, 6,13, 0,16, 6, 6,13, 0, 4,
              3, 0,15, 5,17, 7, 0,15, 5, 5, 5,14, 0,15,14, 0,15, 5, 5, 5,14, 0, 8,20, 5,14, 0, 4,
              3, 0, 0, 0, 8, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 7, 0, 0, 0, 4,
              0, 6,13, 0, 8, 7, 0,16,13, 0,16, 6, 6, 6, 6, 6, 6,13, 0,16,13, 0, 8, 7, 0,16, 6, 0,
              0, 5,14, 0,15,14, 0, 8, 7, 0,15, 5, 5,17,20, 5, 5,14, 0, 8, 7, 0,15,14, 0,15, 5, 0,
              3, 0, 0, 0, 0, 0, 0, 8, 7, 0, 0, 0, 0, 8, 7, 0, 0, 0, 0, 8, 7, 0, 0, 0, 0, 0, 0, 4,
              3, 0,16, 6, 6, 6, 6,18,19, 6, 6,13, 0, 8, 7, 0,16, 6, 6,18,19, 6, 6, 6, 6,13, 0, 4,
              3, 0,15, 5, 5, 5, 5, 5, 5, 5, 5,14, 0,15,14, 0,15, 5, 5, 5, 5, 5, 5, 5, 5,14, 0, 4,
              3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4,
             11, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,10]
              
for j in range(0,34):
    for i in range(0,28):
        if mapwallar[i+j*28]==1:
            mapbgimgim.paste(Image.fromarray(ouwallupimg),(i*8,j*8))
        if mapwallar[i+j*28]==2:
            mapbgimgim.paste(Image.fromarray(ouwalldownimg),(i*8,j*8))
        if mapwallar[i+j*28]==3:
            mapbgimgim.paste(Image.fromarray(ouwallleftimg),(i*8,j*8))
        if mapwallar[i+j*28]==4:
            mapbgimgim.paste(Image.fromarray(ouwallrightimg),(i*8,j*8))
        if mapwallar[i+j*28]==5:
            mapbgimgim.paste(Image.fromarray(inwallupimg),(i*8,j*8))
        if mapwallar[i+j*28]==6:
            mapbgimgim.paste(Image.fromarray(inwalldownimg),(i*8,j*8))
        if mapwallar[i+j*28]==7:
            mapbgimgim.paste(Image.fromarray(inwallleftimg),(i*8,j*8))
        if mapwallar[i+j*28]==8:
            mapbgimgim.paste(Image.fromarray(inwallrightimg),(i*8,j*8))
        if mapwallar[i+j*28]==9:
            mapbgimgim.paste(Image.fromarray(ouwalldliimg),(i*8,j*8))
        if mapwallar[i+j*28]==10:
            mapbgimgim.paste(Image.fromarray(ouwalluliimg),(i*8,j*8))
        if mapwallar[i+j*28]==11:
            mapbgimgim.paste(Image.fromarray(ouwalluriimg),(i*8,j*8))
        if mapwallar[i+j*28]==12:
            mapbgimgim.paste(Image.fromarray(ouwalldriimg),(i*8,j*8))
        if mapwallar[i+j*28]==13:
            mapbgimgim.paste(Image.fromarray(inwalldlimg),(i*8,j*8))
        if mapwallar[i+j*28]==14:
            mapbgimgim.paste(Image.fromarray(inwallulimg),(i*8,j*8))
        if mapwallar[i+j*28]==15:
            mapbgimgim.paste(Image.fromarray(inwallurimg),(i*8,j*8))
        if mapwallar[i+j*28]==16:
            mapbgimgim.paste(Image.fromarray(inwalldrimg),(i*8,j*8))
        if mapwallar[i+j*28]==17:
            mapbgimgim.paste(Image.fromarray(inwalldliimg),(i*8,j*8))
        if mapwallar[i+j*28]==18:
            mapbgimgim.paste(Image.fromarray(inwalluliimg),(i*8,j*8))
        if mapwallar[i+j*28]==19:
            mapbgimgim.paste(Image.fromarray(inwalluriimg),(i*8,j*8))
        if mapwallar[i+j*28]==20:
            mapbgimgim.paste(Image.fromarray(inwalldriimg),(i*8,j*8))

#uparrimg
uparrimgar = [0,0,0,0,0,0,0,0,
              0,0,0,0,1,0,0,0,
              0,0,0,1,1,1,0,0,
              0,0,1,0,1,0,1,0,
              0,0,0,0,1,0,0,0,
              0,0,0,0,1,0,0,0,
              0,0,0,0,1,0,0,0,
              0,0,0,0,0,0,0,0]
uparrimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if uparrimgar[i+j*1*8]==0:
            uparrimg[j][i]=(0,0,0,0)#blank
        else: uparrimg[j][i]=(255,255,255,255)#white

#downarrimg
downarrimgar = [0,0,0,1,0,0,0,0,
                0,0,0,1,0,0,0,0,
                0,0,0,1,0,0,0,0,
                0,0,0,1,0,0,0,0,
                0,1,0,1,0,1,0,0,
                0,0,1,1,1,0,0,0,
                0,0,0,1,0,0,0,0,
                0,0,0,0,0,0,0,0]
downarrimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if downarrimgar[i+j*1*8]==0:
            downarrimg[j][i]=(0,0,0,0)#blank
        else: downarrimg[j][i]=(255,255,255,255)#white

#leftarrimg
leftarrimgar = [0,0,0,0,0,0,0,0,
                0,0,0,1,0,0,0,0,
                0,0,1,0,0,0,0,0,
                0,1,1,1,1,1,1,0,
                0,0,1,0,0,0,0,0,
                0,0,0,1,0,0,0,0,
                0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0]
leftarrimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if leftarrimgar[i+j*1*8]==0:
            leftarrimg[j][i]=(0,0,0,0)#blank
        else: leftarrimg[j][i]=(255,255,255,255)#white

#rightarrimg
rightarrimgar = [0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,0,0,
                 0,0,0,0,1,0,0,0,
                 0,0,0,0,0,1,0,0,
                 0,1,1,1,1,1,1,0,
                 0,0,0,0,0,1,0,0,
                 0,0,0,0,1,0,0,0,
                 0,0,0,0,0,0,0,0]
rightarrimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if rightarrimgar[i+j*1*8]==0:
            rightarrimg[j][i]=(0,0,0,0)#blank
        else: rightarrimg[j][i]=(255,255,255,255)#white

#num0img
num0imgar = [0,0,0,1,1,1,0,0,
             0,0,1,0,0,1,1,0,
             0,1,1,0,0,0,1,1,
             0,1,1,0,0,0,1,1,
             0,1,1,0,0,0,1,1,
             0,0,1,1,0,0,1,0,
             0,0,0,1,1,1,0,0,
             0,0,0,0,0,0,0,0]
num0img = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if num0imgar[i+j*1*8]==0:
            num0img[j][i]=(0,0,0,0)#blank
        else: num0img[j][i]=(255,255,255,255)#white

#num1img
num1imgar = [0,0,0,0,1,1,0,0,
             0,0,0,1,1,1,0,0,
             0,0,0,0,1,1,0,0,
             0,0,0,0,1,1,0,0,
             0,0,0,0,1,1,0,0,
             0,0,0,0,1,1,0,0,
             0,0,1,1,1,1,1,1,
             0,0,0,0,0,0,0,0]
num1img = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if num1imgar[i+j*1*8]==0:
            num1img[j][i]=(0,0,0,0)#blank
        else: num1img[j][i]=(255,255,255,255)#white

#num2img
num2imgar = [0,0,1,1,1,1,1,0,
             0,1,1,0,0,0,1,1,
             0,0,0,0,0,1,1,1,
             0,0,0,1,1,1,1,0,
             0,0,1,1,1,1,0,0,
             0,1,1,1,0,0,0,0,
             0,1,1,1,1,1,1,1,
             0,0,0,0,0,0,0,0]
num2img = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if num2imgar[i+j*1*8]==0:
            num2img[j][i]=(0,0,0,0)#blank
        else: num2img[j][i]=(255,255,255,255)#white

#num3img
num3imgar = [0,0,1,1,1,1,1,1,
             0,0,0,0,0,1,1,0,
             0,0,0,0,1,1,0,0,
             0,0,0,1,1,1,1,0,
             0,0,0,0,0,0,1,1,
             0,1,1,0,0,0,1,1,
             0,0,1,1,1,1,1,0,
             0,0,0,0,0,0,0,0]
num3img = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if num3imgar[i+j*1*8]==0:
            num3img[j][i]=(0,0,0,0)#blank
        else: num3img[j][i]=(255,255,255,255)#white

#num4img
num4imgar = [0,0,0,0,1,1,1,0,
             0,0,0,1,1,1,1,0,
             0,0,1,1,0,1,1,0,
             0,1,1,0,0,1,1,0,
             0,1,1,1,1,1,1,1,
             0,0,0,0,0,1,1,0,
             0,0,0,0,0,1,1,0,
             0,0,0,0,0,0,0,0]
num4img = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if num4imgar[i+j*1*8]==0:
            num4img[j][i]=(0,0,0,0)#blank
        else: num4img[j][i]=(255,255,255,255)#white

#num5img
num5imgar = [0,1,1,1,1,1,1,0,
             0,1,1,0,0,0,0,0,
             0,1,1,1,1,1,1,0,
             0,0,0,0,0,0,1,1,
             0,0,0,0,0,0,1,1,
             0,1,1,0,0,0,1,1,
             0,0,1,1,1,1,1,0,
             0,0,0,0,0,0,0,0]
num5img = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if num5imgar[i+j*1*8]==0:
            num5img[j][i]=(0,0,0,0)#blank
        else: num5img[j][i]=(255,255,255,255)#white

#num6img
num6imgar = [0,0,0,1,1,1,1,0,
             0,0,1,1,0,0,0,0,
             0,1,1,0,0,0,0,0,
             0,1,1,1,1,1,1,0,
             0,1,1,0,0,0,1,1,
             0,1,1,0,0,0,1,1,
             0,0,1,1,1,1,1,0,
             0,0,0,0,0,0,0,0]
num6img = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if num6imgar[i+j*1*8]==0:
            num6img[j][i]=(0,0,0,0)#blank
        else: num6img[j][i]=(255,255,255,255)#white

#num7img
num7imgar = [0,1,1,1,1,1,1,1,
             0,1,1,0,0,0,1,1,
             0,0,0,0,0,1,1,0,
             0,0,0,0,1,1,0,0,
             0,0,0,1,1,0,0,0,
             0,0,0,1,1,0,0,0,
             0,0,0,1,1,0,0,0,
             0,0,0,0,0,0,0,0]
num7img = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if num7imgar[i+j*1*8]==0:
            num7img[j][i]=(0,0,0,0)#blank
        else: num7img[j][i]=(255,255,255,255)#white

#num8img
num8imgar = [0,0,1,1,1,1,0,0,
             0,1,1,0,0,0,1,0,
             0,1,1,1,0,0,1,0,
             0,0,1,1,1,1,0,0,
             0,1,0,0,1,1,1,1,
             0,1,0,0,0,0,1,1,
             0,0,1,1,1,1,1,0,
             0,0,0,0,0,0,0,0]
num8img = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if num8imgar[i+j*1*8]==0:
            num8img[j][i]=(0,0,0,0)#blank
        else: num8img[j][i]=(255,255,255,255)#white

#num9img
num9imgar = [0,0,1,1,1,1,1,0,
             0,1,1,0,0,0,1,1,
             0,1,1,0,0,0,1,1,
             0,0,1,1,1,1,1,1,
             0,0,0,0,0,0,1,1,
             0,0,0,0,0,1,1,0,
             0,0,1,1,1,1,0,0,
             0,0,0,0,0,0,0,0]
num9img = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if num9imgar[i+j*1*8]==0:
            num9img[j][i]=(0,0,0,0)#blank
        else: num9img[j][i]=(255,255,255,255)#white

#smallbeanimg
smallbeanimgar = [0,0,0,0,0,0,0,0,
                  0,0,0,0,0,0,0,0,
                  0,0,0,0,0,0,0,0,
                  0,0,0,1,1,0,0,0,
                  0,0,0,1,1,0,0,0,
                  0,0,0,0,0,0,0,0,
                  0,0,0,0,0,0,0,0,
                  0,0,0,0,0,0,0,0]
smallbeanimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if smallbeanimgar[i+j*1*8]==0:
            smallbeanimg[j][i]=(0,0,0,0)#blank
        else: smallbeanimg[j][i]=(200,200,255,255)#pink

#bigbeanimg
bigbeanimgar = [0,0,1,1,1,1,0,0,
                0,1,1,1,1,1,1,0,
                1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,
                0,1,1,1,1,1,1,0,
                0,0,1,1,1,1,0,0]
bigbeanimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if bigbeanimgar[i+j*1*8]==0:
            bigbeanimg[j][i]=(0,0,0,0)#blank
        else: bigbeanimg[j][i]=(200,200,255,255)#pink

#readyimg
readyimgar = [0,1,1,1,1,1,1,0,  0,0,1,1,1,1,1,1,  0,0,0,1,1,1,0,0,  0,1,1,1,1,1,0,0,  0,0,1,1,0,0,1,1,  0,0,0,0,0,1,1,1,
              0,1,1,0,0,0,1,1,  0,0,1,1,0,0,0,0,  0,0,1,1,0,1,1,0,  0,1,1,0,0,1,1,0,  0,0,1,1,0,0,1,1,  0,0,0,0,0,1,1,1,
              0,1,1,0,0,0,1,1,  0,0,1,1,0,0,0,0,  0,1,1,0,0,0,1,1,  0,1,1,0,0,0,1,1,  0,0,1,1,0,0,1,1,  0,0,0,0,1,1,1,0,
              0,1,1,0,0,1,1,1,  0,0,1,1,1,1,1,0,  0,1,1,0,0,0,1,1,  0,1,1,0,0,0,1,1,  0,0,0,1,1,1,1,0,  0,0,0,0,1,1,0,0,
              0,1,1,1,1,1,0,0,  0,0,1,1,0,0,0,0,  0,1,1,1,1,1,1,1,  0,1,1,0,0,0,1,1,  0,0,0,0,1,1,0,0,  0,0,0,0,1,0,0,0,
              0,1,1,0,1,1,1,0,  0,0,1,1,0,0,0,0,  0,1,1,0,0,0,1,1,  0,1,1,0,0,1,1,0,  0,0,0,0,1,1,0,0,  0,0,0,0,0,0,0,0,
              0,1,1,0,0,1,1,1,  0,0,1,1,1,1,1,1,  0,1,1,0,0,0,1,1,  0,1,1,1,1,1,0,0,  0,0,0,0,1,1,0,0,  0,0,1,0,0,0,0,0,
              0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0]
readyimg = np.zeros((1*8, 6*8, 4), np.uint8)
for i in range(0,6*8):
    for j in range(0,1*8):
        if readyimgar[i+j*6*8]==0:
            readyimg[j][i]=(0,0,0,255)#black
        else: readyimg[j][i]=(0,255,255,255)#yellow

#gameoverimg
gameoverimgar = [0,0,0,1,1,1,1,1,  0,0,0,1,1,1,0,0,  0,1,1,0,0,0,1,1,  0,0,1,1,1,1,1,1,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  0,0,1,1,1,1,1,0,  0,1,1,0,0,0,1,1,  0,0,1,1,1,1,1,1,  0,1,1,1,1,1,1,0,
                 0,0,1,1,0,0,0,0,  0,0,1,1,0,1,1,0,  0,1,1,1,0,1,1,1,  0,0,1,1,0,0,0,0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  0,1,1,0,0,0,1,1,  0,1,1,0,0,0,1,1,  0,0,1,1,0,0,0,0,  0,1,1,0,0,0,1,1,
                 0,1,1,0,0,0,0,0,  0,1,1,0,0,0,1,1,  0,1,1,1,1,1,1,1,  0,0,1,1,0,0,0,0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  0,1,1,0,0,0,1,1,  0,1,1,0,0,0,1,1,  0,0,1,1,0,0,0,0,  0,1,1,0,0,0,1,1,
                 0,1,1,0,0,1,1,1,  0,1,1,0,0,0,1,1,  0,1,1,1,1,1,1,1,  0,0,1,1,1,1,1,0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  0,1,1,0,0,0,1,1,  0,1,1,1,0,1,1,1,  0,0,1,1,1,1,1,0,  0,1,1,0,0,1,1,1,
                 0,1,1,0,0,0,1,1,  0,1,1,1,1,1,1,1,  0,1,1,0,1,0,1,1,  0,0,1,1,0,0,0,0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  0,1,1,0,0,0,1,1,  0,0,1,1,1,1,1,0,  0,0,1,1,0,0,0,0,  0,1,1,1,1,1,0,0,
                 0,0,1,1,0,0,1,1,  0,1,1,0,0,0,1,1,  0,1,1,0,0,0,1,1,  0,0,1,1,0,0,0,0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  0,1,1,0,0,0,1,1,  0,0,0,1,1,1,0,0,  0,0,1,1,0,0,0,0,  0,1,1,0,1,1,1,0,
                 0,0,0,1,1,1,1,1,  0,1,1,0,0,0,1,1,  0,1,1,0,0,0,1,1,  0,0,1,1,1,1,1,1,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  0,0,1,1,1,1,1,0,  0,0,0,0,1,0,0,0,  0,0,1,1,1,1,1,1,  0,1,1,0,0,1,1,1,
                 0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0]
gameoverimg = np.zeros((1*8, 10*8, 4), np.uint8)
for i in range(0,10*8):
    for j in range(0,1*8):
        if gameoverimgar[i+j*10*8]==0:
            gameoverimg[j][i]=(0,0,0,255)#black
        else: gameoverimg[j][i]=(0,0,255,255)#red
        
#pacman0img
pacman0imgar = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,
                0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,
                0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
                0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
                0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
                0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
                0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
                0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
                0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
                0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
                0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
                0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
                0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,
                0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
pacman0img = np.zeros((16, 16, 4), np.uint8)
for i in range(0,16):
    for j in range(0,16):
        if pacman0imgar[i+j*16]==0:
            pacman0img[j][i]=(0,0,0,0)#blank
        else: pacman0img[j][i]=(0,255,255,255)#yellow

#pacman1img
pacman1imgar = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,
                0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,
                0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
                0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
                0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,
                0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,
                0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,
                0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,
                0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,
                0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,
                0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
                0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
                0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,
                0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
pacman1img = np.zeros((16, 16, 4), np.uint8)
for i in range(0,16):
    for j in range(0,16):
        if pacman1imgar[i+j*16]==0:
            pacman1img[j][i]=(0,0,0,0)#blank
        else: pacman1img[j][i]=(0,255,255,255)#yellow

#pacman2img
pacman2imgar = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,
                0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,
                0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,
                0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,
                0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,
                0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,
                0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,
                0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,
                0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,
                0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,
                0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,
                0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,
                0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,
                0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
pacman2img = np.zeros((16, 16, 4), np.uint8)
for i in range(0,16):
    for j in range(0,16):
        if pacman2imgar[i+j*16]==0:
            pacman2img[j][i]=(0,0,0,0)#blank
        else: pacman2img[j][i]=(0,255,255,255)#yellow

#ghost0img
ghost0imgar = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
               0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,
               0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,
               0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,
               0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
               0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
               0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
               0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
               0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
               0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
               0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
               0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
               0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
               0,1,1,0,1,1,1,0,0,1,1,1,0,1,1,0,
               0,1,0,0,0,1,1,0,0,1,1,0,0,0,1,0,
               0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
ghored0img = np.zeros((16, 16, 4), np.uint8)
ghopink0img = np.zeros((16, 16, 4), np.uint8)
ghocyan0img = np.zeros((16, 16, 4), np.uint8)
ghoorange0img = np.zeros((16, 16, 4), np.uint8)
for i in range(0,16):
    for j in range(0,16):
        if ghost0imgar[i+j*16]==0:
            ghored0img[j][i]=(0,0,0,0)#blank
            ghopink0img[j][i]=(0,0,0,0)#blank
            ghocyan0img[j][i]=(0,0,0,0)#blank
            ghoorange0img[j][i]=(0,0,0,0)#blank
        else:
            ghored0img[j][i]=(0,0,255,255)#red
            ghopink0img[j][i]=(175,175,255,255)#pink
            ghocyan0img[j][i]=(255,255,0,255)#cyan
            ghoorange0img[j][i]=(0,200,255,255)#orange

#ghost1img
ghost1imgar = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
               0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,
               0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,
               0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,
               0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
               0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
               0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
               0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
               0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
               0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
               0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
               0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
               0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
               0,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0,
               0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,
               0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
ghored1img = np.zeros((16, 16, 4), np.uint8)
ghopink1img = np.zeros((16, 16, 4), np.uint8)
ghocyan1img = np.zeros((16, 16, 4), np.uint8)
ghoorange1img = np.zeros((16, 16, 4), np.uint8)
for i in range(0,16):
    for j in range(0,16):
        if ghost1imgar[i+j*16]==0:
            ghored1img[j][i]=(0,0,0,0)#blank
            ghopink1img[j][i]=(0,0,0,0)#blank
            ghocyan1img[j][i]=(0,0,0,0)#blank
            ghoorange1img[j][i]=(0,0,0,0)#blank
        else:
            ghored1img[j][i]=(0,0,255,255)#red
            ghopink1img[j][i]=(175,175,255,255)#pink
            ghocyan1img[j][i]=(255,255,0,255)#cyan
            ghoorange1img[j][i]=(0,200,255,255)#orange

#ghoflee0img
ghoflee0imgar = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,
                 0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,
                 0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,
                 0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
                 0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
                 0,0,1,1,1,2,2,1,1,2,2,1,1,1,0,0,
                 0,1,1,1,1,2,2,1,1,2,2,1,1,1,1,0,
                 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
                 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
                 0,1,1,2,2,1,1,2,2,1,1,2,2,1,1,0,
                 0,1,2,1,1,2,2,1,1,2,2,1,1,2,1,0,
                 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
                 0,1,1,0,1,1,1,0,0,1,1,1,0,1,1,0,
                 0,1,0,0,0,1,1,0,0,1,1,0,0,0,1,0,
                 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
ghoflee0img = np.zeros((16, 16, 4), np.uint8)
ghoblink0img = np.zeros((16, 16, 4), np.uint8)
for i in range(0,16):
    for j in range(0,16):
        if ghoflee0imgar[i+j*16]==0:
            ghoflee0img[j][i]=(0,0,0,0)#blank
            ghoblink0img[j][i]=(0,0,0,0)#blank
        elif ghoflee0imgar[i+j*16]==1:
            ghoflee0img[j][i]=(255,0,0,255)#blue
            ghoblink0img[j][i]=(255,255,255,255)#white
        else:
            ghoflee0img[j][i]=(175,175,175,255)#gray
            ghoblink0img[j][i]=(0,0,255,255)#red

#ghoflee1img
ghoflee1imgar = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,
                 0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,
                 0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,
                 0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
                 0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
                 0,0,1,1,1,2,2,1,1,2,2,1,1,1,0,0,
                 0,1,1,1,1,2,2,1,1,2,2,1,1,1,1,0,
                 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
                 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
                 0,1,1,2,2,1,1,2,2,1,1,2,2,1,1,0,
                 0,1,2,1,1,2,2,1,1,2,2,1,1,2,1,0,
                 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
                 0,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0,
                 0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,
                 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
ghoflee1img = np.zeros((16, 16, 4), np.uint8)
ghoblink1img = np.zeros((16, 16, 4), np.uint8)
for i in range(0,16):
    for j in range(0,16):
        if ghoflee1imgar[i+j*16]==0:
            ghoflee1img[j][i]=(0,0,0,0)#blank
            ghoblink1img[j][i]=(0,0,0,0)#blank
        elif ghoflee1imgar[i+j*16]==1:
            ghoflee1img[j][i]=(255,0,0,255)#blue
            ghoblink1img[j][i]=(255,255,255,255)#white
        else:
            ghoflee1img[j][i]=(175,175,175,255)#gray
            ghoblink1img[j][i]=(0,0,255,255)#red

#ghoeyeupimg
ghoeyeupimgar = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                 0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,
                 0,0,0,0,2,2,1,1,1,1,2,2,0,0,0,0,
                 0,0,0,3,2,2,3,1,1,3,2,2,3,0,0,0,
                 0,0,1,3,3,3,3,1,1,3,3,3,3,1,0,0,
                 0,0,1,3,3,3,3,1,1,3,3,3,3,1,0,0,
                 0,0,1,1,3,3,1,1,1,1,3,3,1,1,0,0,
                 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
                 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
                 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
                 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
                 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
                 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
                 0,1,1,0,1,1,1,0,0,1,1,1,0,1,1,0,
                 0,1,0,0,0,1,1,0,0,1,1,0,0,0,1,0,
                 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
ghoeyeupimg = np.zeros((16, 16, 4), np.uint8)
for i in range(0,16):
    for j in range(0,16):
        if ghoeyeupimgar[i+j*16]<=1:
            ghoeyeupimg[j][i]=(0,0,0,0)#blank
        elif ghoeyeupimgar[i+j*16]==2:
            ghoeyeupimg[j][i]=(255,0,0,255)#blue
        else: ghoeyeupimg[j][i]=(175,175,175,255)#gray

#ghoeyedownimg
ghoeyedownimgar = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,
                   0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,
                   0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,
                   0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
                   0,0,1,1,3,3,1,1,1,1,3,3,1,1,0,0,
                   0,0,1,3,3,3,3,1,1,3,3,3,3,1,0,0,
                   0,1,1,3,3,3,3,1,1,3,3,3,3,1,1,0,
                   0,1,1,3,2,2,3,1,1,3,2,2,3,1,1,0,
                   0,1,1,1,2,2,1,1,1,1,2,2,1,1,1,0,
                   0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
                   0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
                   0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
                   0,1,1,0,1,1,1,0,0,1,1,1,0,1,1,0,
                   0,1,0,0,0,1,1,0,0,1,1,0,0,0,1,0,
                   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
ghoeyedownimg = np.zeros((16, 16, 4), np.uint8)
for i in range(0,16):
    for j in range(0,16):
        if ghoeyedownimgar[i+j*16]<=1:
            ghoeyedownimg[j][i]=(0,0,0,0)#blank
        elif ghoeyedownimgar[i+j*16]==2:
            ghoeyedownimg[j][i]=(255,0,0,255)#blue
        else: ghoeyedownimg[j][i]=(175,175,175,255)#gray

#ghoeyeleftimg
ghoeyeleftimgar = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,
                   0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,
                   0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,
                   0,0,1,3,3,1,1,1,1,3,3,1,1,1,0,0,
                   0,0,3,3,3,3,1,1,3,3,3,3,1,1,0,0,
                   0,0,2,2,3,3,1,1,2,2,3,3,1,1,0,0,
                   0,1,2,2,3,3,1,1,2,2,3,3,1,1,1,0,
                   0,1,1,3,3,1,1,1,1,3,3,1,1,1,1,0,
                   0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
                   0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
                   0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
                   0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
                   0,1,1,0,1,1,1,0,0,1,1,1,0,1,1,0,
                   0,1,0,0,0,1,1,0,0,1,1,0,0,0,1,0,
                   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
ghoeyeleftimg = np.zeros((16, 16, 4), np.uint8)
for i in range(0,16):
    for j in range(0,16):
        if ghoeyeleftimgar[i+j*16]<=1:
            ghoeyeleftimg[j][i]=(0,0,0,0)#blank
        elif ghoeyeleftimgar[i+j*16]==2:
            ghoeyeleftimg[j][i]=(255,0,0,255)#blue
        else: ghoeyeleftimg[j][i]=(175,175,175,255)#gray

#ghoeyerightimg
ghoeyerightimgar = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                    0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,
                    0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,
                    0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,
                    0,0,1,1,1,3,3,1,1,1,1,3,3,1,0,0,
                    0,0,1,1,3,3,3,3,1,1,3,3,3,3,0,0,
                    0,0,1,1,3,3,2,2,1,1,3,3,2,2,0,0,
                    0,1,1,1,3,3,2,2,1,1,3,3,2,2,1,0,
                    0,1,1,1,1,3,3,1,1,1,1,3,3,1,1,0,
                    0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
                    0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
                    0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
                    0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
                    0,1,1,0,1,1,1,0,0,1,1,1,0,1,1,0,
                    0,1,0,0,0,1,1,0,0,1,1,0,0,0,1,0,
                    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
ghoeyerightimg = np.zeros((16, 16, 4), np.uint8)
for i in range(0,16):
    for j in range(0,16):
        if ghoeyerightimgar[i+j*16]<=1:
            ghoeyerightimg[j][i]=(0,0,0,0)#blank
        elif ghoeyerightimgar[i+j*16]==2:
            ghoeyerightimg[j][i]=(255,0,0,255)#blue
        else: ghoeyerightimg[j][i]=(175,175,175,255)#gray

#ghotarimg
ghotarimgar = [0,0,0,0,0,0,0,0,
               0,1,1,0,0,1,1,0,
               0,1,1,1,1,1,1,0,
               0,0,1,1,1,1,0,0,
               0,0,1,1,1,1,0,0,
               0,1,1,1,1,1,1,0,
               0,1,1,0,0,1,1,0,
               0,0,0,0,0,0,0,0]
ghortarimg = np.zeros((1*8, 1*8, 4), np.uint8)
ghoptarimg = np.zeros((1*8, 1*8, 4), np.uint8)
ghoctarimg = np.zeros((1*8, 1*8, 4), np.uint8)
ghootarimg = np.zeros((1*8, 1*8, 4), np.uint8)
chenghaoimg = np.zeros((1*8, 1*8, 4), np.uint8)
for i in range(0,1*8):
    for j in range(0,1*8):
        if ghotarimgar[i+j*1*8]==0:
            ghortarimg[j][i]=(0,0,0,0)#blank
            ghoptarimg[j][i]=(0,0,0,0)#blank
            ghoctarimg[j][i]=(0,0,0,0)#blank
            ghootarimg[j][i]=(0,0,0,0)#blank
            chenghaoimg[j][i]=(0,0,0,0)#blank
        else:
            ghortarimg[j][i]=(0,0,255,255)#red
            ghoptarimg[j][i]=(175,175,255,255)#pink
            ghoctarimg[j][i]=(255,255,0,255)#cyan
            ghootarimg[j][i]=(0,200,255,255)#orange
            chenghaoimg[j][i]=(0,255,255,255)#white

#bon100img
bon100imgar = [0,0,0,0,0,1,0,0,1,1,0,0,0,1,1,0,0,0,0,0,
               0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,0,0,
               0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,0,0,
               0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,0,0,
               0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,0,0,
               0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,0,0,
               0,0,0,0,0,1,0,0,1,1,0,0,0,1,1,0,0,0,0,0,
               0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
bon100img = np.zeros((8, 20, 4), np.uint8)
for i in range(0,20):
    for j in range(0,8):
        if bon100imgar[i+j*20]==0:
            bon100img[j][i]=(0,0,0,0)#blank
        else:
            bon100img[j][i]=(255,255,255,255)#white

#bon200img
bon200imgar = [0,0,0,1,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,0,
               0,0,1,0,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,0,
               0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,0,
               0,0,0,0,0,1,0,0,1,0,0,1,0,1,0,0,1,0,0,0,
               0,0,0,0,1,0,0,0,1,0,0,1,0,1,0,0,1,0,0,0,
               0,0,0,1,0,0,0,0,1,0,0,1,0,1,0,0,1,0,0,0,
               0,0,1,1,1,1,1,0,0,1,1,0,0,0,1,1,0,0,0,0,
               0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
bon200img = np.zeros((8, 20, 4), np.uint8)
for i in range(0,20):
    for j in range(0,8):
        if bon200imgar[i+j*20]==0:
            bon200img[j][i]=(0,0,0,0)#blank
        else:
            bon200img[j][i]=(255,255,255,255)#white

#bon300img
bon300imgar = [0,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,0,
               0,0,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,0,
               0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,0,
               0,0,0,0,1,1,0,0,1,0,0,1,0,1,0,0,1,0,0,0,
               0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,0,
               0,0,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,0,
               0,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,0,
               0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
bon300img = np.zeros((8, 20, 4), np.uint8)
for i in range(0,20):
    for j in range(0,8):
        if bon300imgar[i+j*20]==0:
            bon300img[j][i]=(0,0,0,0)#blank
        else:
            bon300img[j][i]=(255,255,255,255)#white

#bon400img
bon400imgar = [0,0,0,0,0,1,0,0,0,1,1,0,0,0,1,1,0,0,0,0,
               0,0,0,0,1,1,0,0,1,0,0,1,0,1,0,0,1,0,0,0,
               0,0,0,1,0,1,0,0,1,0,0,1,0,1,0,0,1,0,0,0,
               0,0,1,0,0,1,0,0,1,0,0,1,0,1,0,0,1,0,0,0,
               0,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,1,0,0,0,
               0,0,0,0,0,1,0,0,1,0,0,1,0,1,0,0,1,0,0,0,
               0,0,0,0,0,1,0,0,0,1,1,0,0,0,1,1,0,0,0,0,
               0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
bon400img = np.zeros((8, 20, 4), np.uint8)
for i in range(0,20):
    for j in range(0,8):
        if bon400imgar[i+j*20]==0:
            bon400img[j][i]=(0,0,0,0)#blank
        else:
            bon400img[j][i]=(255,255,255,255)#white
#bon500img
bon500imgar = [0,0,1,1,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,0,
               0,0,1,0,0,0,0,0,1,0,0,1,0,1,0,0,1,0,0,0,
               0,0,1,0,0,0,0,0,1,0,0,1,0,1,0,0,1,0,0,0,
               0,0,1,1,1,1,0,0,1,0,0,1,0,1,0,0,1,0,0,0,
               0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,0,
               0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,0,
               0,0,1,1,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,0,
               0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
bon500img = np.zeros((8, 20, 4), np.uint8)
for i in range(0,20):
    for j in range(0,8):
        if bon500imgar[i+j*20]==0:
            bon500img[j][i]=(0,0,0,0)#blank
        else:
            bon500img[j][i]=(255,255,255,255)#white

#bon700img
bon700imgar = [0,0,0,1,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,0,
               0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,0,
               0,0,0,0,0,1,0,0,1,0,0,1,0,1,0,0,1,0,0,0,
               0,0,0,0,0,1,0,0,1,0,0,1,0,1,0,0,1,0,0,0,
               0,0,0,0,1,0,0,0,1,0,0,1,0,1,0,0,1,0,0,0,
               0,0,0,0,1,0,0,0,1,0,0,1,0,1,0,0,1,0,0,0,
               0,0,0,0,1,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,
               0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
bon700img = np.zeros((8, 20, 4), np.uint8)
for i in range(0,20):
    for j in range(0,8):
        if bon700imgar[i+j*20]==0:
            bon700img[j][i]=(0,0,0,0)#blank
        else:
            bon700img[j][i]=(255,255,255,255)#white

#bon800img
bon800imgar = [0,0,0,1,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,0,
               0,0,1,0,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,0,
               0,0,1,0,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,0,
               0,0,0,1,1,1,0,0,1,0,0,1,0,1,0,0,1,0,0,0,
               0,0,1,0,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,0,
               0,0,1,0,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,0,
               0,0,0,1,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,0,
               0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
bon800img = np.zeros((8, 20, 4), np.uint8)
for i in range(0,20):
    for j in range(0,8):
        if bon800imgar[i+j*20]==0:
            bon800img[j][i]=(0,0,0,0)#blank
        else:
            bon800img[j][i]=(255,255,255,255)#white

#bon1000img
bon1000imgar = [0,0,1,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,
                0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,
                0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,
                0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,
                0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,
                0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,
                0,0,1,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
bon1000img = np.zeros((8, 20, 4), np.uint8)
for i in range(0,20):
    for j in range(0,8):
        if bon1000imgar[i+j*20]==0:
            bon1000img[j][i]=(0,0,0,0)#blank
        else:
            bon1000img[j][i]=(255,255,255,255)#white

#bon1600img
bon1600imgar = [0,0,1,0,0,1,1,1,0,0,1,1,0,0,0,1,1,0,0,0,
                0,0,1,0,1,0,0,0,0,1,0,0,1,0,1,0,0,1,0,0,
                0,0,1,0,1,0,0,0,0,1,0,0,1,0,1,0,0,1,0,0,
                0,0,1,0,1,1,1,1,0,1,0,0,1,0,1,0,0,1,0,0,
                0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,
                0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,
                0,0,1,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
bon1600img = np.zeros((8, 20, 4), np.uint8)
for i in range(0,20):
    for j in range(0,8):
        if bon1600imgar[i+j*20]==0:
            bon1600img[j][i]=(0,0,0,0)#blank
        else:
            bon1600img[j][i]=(255,255,255,255)#white

#bon2000img
bon2000imgar = [0,1,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,
                1,0,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,
                0,0,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,
                0,0,0,1,0,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,
                0,0,1,0,0,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,
                0,1,0,0,0,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,
                1,1,1,1,1,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
bon2000img = np.zeros((8, 20, 4), np.uint8)
for i in range(0,20):
    for j in range(0,8):
        if bon2000imgar[i+j*20]==0:
            bon2000img[j][i]=(0,0,0,0)#blank
        else:
            bon2000img[j][i]=(255,255,255,255)#white

#bon3000img
bon3000imgar = [0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,
                0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,
                0,0,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,
                0,0,1,1,0,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,
                0,0,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,
                0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,
                0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
bon3000img = np.zeros((8, 20, 4), np.uint8)
for i in range(0,20):
    for j in range(0,8):
        if bon3000imgar[i+j*20]==0:
            bon3000img[j][i]=(0,0,0,0)#blank
        else:
            bon3000img[j][i]=(255,255,255,255)#white
            
#bon5000img
bon5000imgar = [1,1,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,
                1,0,0,0,0,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,
                1,0,0,0,0,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,
                1,1,1,1,0,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,
                0,0,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,
                0,0,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,
                1,1,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
bon5000img = np.zeros((8, 20, 4), np.uint8)
for i in range(0,20):
    for j in range(0,8):
        if bon5000imgar[i+j*20]==0:
            bon5000img[j][i]=(0,0,0,0)#blank
        else:
            bon5000img[j][i]=(255,255,255,255)#white
            
#bonus1img
bonus1imgar = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,
               0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,
               0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,
               0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,
               0,0,0,1,1,1,1,0,0,0,1,0,0,0,0,0,
               0,0,1,1,1,0,1,1,0,1,0,0,0,0,0,0,
               0,0,1,1,1,1,1,0,1,0,1,1,0,0,0,0,
               0,0,1,0,1,1,0,1,1,0,1,1,1,0,0,0,
               0,0,1,1,0,1,0,1,1,1,1,1,1,0,0,0,
               0,0,0,1,1,1,0,1,0,1,1,1,1,0,0,0,
               0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,
               0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,
               0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
bonus1img = np.zeros((16, 16, 4), np.uint8)
for i in range(0,16):
    for j in range(0,16):
        if bonus1imgar[i+j*16]==0:
            bonus1img[j][i]=(0,0,0,0)#blank
        else: bonus1img[j][i]=(0,0,255,255)#red

#bonus2img
bonus2imgar = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
               0,0,0,0,0,1,1,1,0,1,1,1,0,0,0,0,
               0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,
               0,0,0,0,1,1,0,1,1,1,0,1,1,0,0,0,
               0,0,0,1,1,1,1,0,1,0,1,1,1,1,0,0,
               0,0,0,1,0,1,1,1,0,1,1,1,0,1,0,0,
               0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,0,
               0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,
               0,0,0,0,1,0,1,1,0,1,1,0,1,0,0,0,
               0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,
               0,0,0,0,0,1,0,1,1,0,1,1,0,0,0,0,
               0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,
               0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
bonus2img = np.zeros((16, 16, 4), np.uint8)
for i in range(0,16):
    for j in range(0,16):
        if bonus2imgar[i+j*16]==0:
            bonus2img[j][i]=(0,0,0,0)#blank
        elif bonus2imgar[i+j*16]==1:
            bonus2img[j][i]=(0,0,255,255)#red

#bonus3img
bonus3imgar = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,
               0,0,0,0,0,0,0,1,0,1,1,1,1,0,0,0,
               0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,
               0,0,0,0,1,0,1,1,1,1,1,1,0,0,0,0,
               0,0,0,1,1,1,0,0,1,1,1,1,1,0,0,0,
               0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
               0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
               0,0,1,1,1,1,1,1,1,1,1,0,1,1,0,0,
               0,0,1,1,1,1,1,1,1,1,1,0,1,1,0,0,
               0,0,0,1,1,1,1,1,1,1,0,1,1,0,0,0,
               0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,
               0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,
               0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
bonus3img = np.zeros((16, 16, 4), np.uint8)
for i in range(0,16):
    for j in range(0,16):
        if bonus3imgar[i+j*16]==0:
            bonus3img[j][i]=(0,0,0,0)#blank
        else: bonus3img[j][i]=(0,200,255,255)#orange

#bonus4img
bonus4imgar = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,
               0,0,0,1,1,1,0,1,0,1,1,1,0,0,0,0,
               0,0,1,1,1,1,1,0,1,1,1,1,1,0,0,0,
               0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
               0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
               0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
               0,0,1,1,1,1,1,1,1,1,1,0,1,1,0,0,
               0,0,1,1,1,1,1,1,1,1,1,0,1,1,0,0,
               0,0,0,1,1,1,1,1,1,1,0,1,1,0,0,0,
               0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,
               0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,
               0,0,0,0,0,1,1,0,1,1,1,0,0,0,0,0,
               0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
bonus4img = np.zeros((16, 16, 4), np.uint8)
for i in range(0,16):
    for j in range(0,16):
        if bonus4imgar[i+j*16]==0:
            bonus4img[j][i]=(0,0,0,0)#blank
        else: bonus4img[j][i]=(0,0,175,255)#darkred

#bonus5img
bonus5imgar = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
               0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
               0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,
               0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,
               0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,
               0,0,0,0,1,1,1,1,1,0,0,1,1,0,0,0,
               0,0,0,0,1,1,0,0,1,1,1,1,1,0,0,0,
               0,0,0,1,1,1,1,1,1,1,1,0,0,1,0,0,
               0,0,0,1,0,0,1,1,0,0,1,1,1,1,0,0,
               0,0,0,1,1,1,1,1,1,1,1,0,0,1,0,0,
               0,0,0,0,1,1,1,1,0,0,1,1,1,0,0,0,
               0,0,0,0,1,0,0,1,1,1,1,1,1,0,0,0,
               0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,
               0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,
               0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
bonus5img = np.zeros((16, 16, 4), np.uint8)
for i in range(0,16):
    for j in range(0,16):
        if bonus5imgar[i+j*16]==0:
            bonus5img[j][i]=(0,0,0,0)#blank
        else: bonus5img[j][i]=(0,200,0,255)#green

#bonus6img
bonus6imgar = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
               0,0,0,1,0,0,0,1,1,1,0,0,0,1,0,0,
               0,0,0,1,0,0,1,1,1,1,1,0,0,1,0,0,
               0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,
               0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,
               0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,
               0,0,0,0,1,1,1,0,1,0,1,1,1,0,0,0,
               0,0,0,0,0,1,1,0,1,0,1,1,0,0,0,0,
               0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,
               0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
bonus6img = np.zeros((16, 16, 4), np.uint8)
for i in range(0,16):
    for j in range(0,16):
        if bonus6imgar[i+j*16]==0:
            bonus6img[j][i]=(0,0,0,0)#blank
        else: bonus6img[j][i]=(0,200,255,255)#orange

#bonus7img
bonus7imgar = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,
               0,0,0,0,0,0,0,0,1,1,1,1,0,1,0,0,
               0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,
               0,0,0,0,0,0,1,1,0,0,1,1,1,0,0,0,
               0,0,0,0,0,1,1,0,0,1,1,1,1,1,0,0,
               0,0,0,0,0,1,1,0,1,1,1,1,1,1,0,0,
               0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,
               0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,
               0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,
               0,0,1,1,0,0,0,0,0,1,1,1,1,1,0,0,
               0,0,1,1,1,0,0,0,1,0,0,0,1,1,1,0,
               0,0,0,1,1,1,0,1,1,0,0,0,0,1,1,0,
               0,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,
               0,0,0,0,0,0,1,1,0,1,1,1,1,0,0,0,
               0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
bonus7img = np.zeros((16, 16, 4), np.uint8)
for i in range(0,16):
    for j in range(0,16):
        if bonus7imgar[i+j*16]==0:
            bonus7img[j][i]=(0,0,0,0)#blank
        else: bonus7img[j][i]=(0,200,255,255)#orange

#bonus8img
bonus8imgar = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,
               0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,
               0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,
               0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,
               0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,
               0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,
               0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,
               0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,
               0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
               0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,
               0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,
               0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,
               0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
               0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
bonus8img = np.zeros((16, 16, 4), np.uint8)
for i in range(0,16):
    for j in range(0,16):
        if bonus8imgar[i+j*16]==0:
            bonus8img[j][i]=(0,0,0,0)#blank
        else: bonus8img[j][i]=(255,0,0,255)#blue

#寻路
def finddir(ghox,ghoy,tarx,tary,ghopath,ghofindway,dirforbid,ghodir,ghostlive):
    updis = 9999
    leftdis = 9999
    downdis = 9999
    rightdis = 9999
    if ghostlive >= 0:
        ghopath[13][15] = 0
    else:
        ghopath[13][15] = 1
    if dirforbid == 0:#允许后退
        for i in range(0,28):
            for j in range(0,34):
                ghofindway[i][j] = 0
        if ghopath[ghox][ghoy-1] > 0:
            updis = np.sqrt((ghox-1-tarx)*(ghox-1-tarx)+(ghoy-1-tary)*(ghoy-1-tary))
        if ghopath[ghox-1][ghoy] > 0:
            leftdis = np.sqrt((ghox-2-tarx)*(ghox-2-tarx)+(ghoy-tary)*(ghoy-tary))
        if ghopath[ghox][ghoy+1] > 0:
            downdis = np.sqrt((ghox-1-tarx)*(ghox-1-tarx)+(ghoy+1-tary)*(ghoy+1-tary))
        if ghopath[ghox+1][ghoy] > 0:
            rightdis = np.sqrt((ghox-tarx)*(ghox-tarx)+(ghoy-tary)*(ghoy-tary))
        if (updis <= leftdis and updis <= downdis and updis <= rightdis):
            ghofindway[ghox][ghoy] = 8
        elif (leftdis <= downdis and leftdis <= rightdis):
            ghofindway[ghox][ghoy] = 4
        elif downdis <= rightdis:
            ghofindway[ghox][ghoy] = 2
        else:
            ghofindway[ghox][ghoy] = 6
        ghodir = ghofindway[ghox][ghoy]
    if ghodir == 4 and ghox > 1:
        if ghopath[ghox-1][ghoy-1] > 0:
            updis = np.sqrt((ghox-1-tarx)*(ghox-1-tarx)+(ghoy-1-tary)*(ghoy-1-tary))
        if ghopath[ghox-2][ghoy] > 0:
            leftdis = np.sqrt((ghox-2-tarx)*(ghox-2-tarx)+(ghoy-tary)*(ghoy-tary))
        if ghopath[ghox-1][ghoy+1] > 0:
            downdis = np.sqrt((ghox-1-tarx)*(ghox-1-tarx)+(ghoy+1-tary)*(ghoy+1-tary))
        if ghopath[ghox][ghoy] > 0:
            rightdis = np.sqrt((ghox-tarx)*(ghox-tarx)+(ghoy-tary)*(ghoy-tary))
        if dirforbid == 1:
            rightdis = 9999
        if (updis <= leftdis and updis <= downdis and updis <= rightdis):
            ghofindway[ghox-1][ghoy] = 8
        elif (leftdis <= downdis and leftdis <= rightdis):
            ghofindway[ghox-1][ghoy] = 4
        elif downdis <= rightdis:
            ghofindway[ghox-1][ghoy] = 2
        else:
            ghofindway[ghox-1][ghoy] = 6
        return ghofindway
    elif ghodir == 6 and ghox < 26:
        if ghopath[ghox+1][ghoy-1] > 0:
            updis = np.sqrt((ghox+1-tarx)*(ghox+1-tarx)+(ghoy-1-tary)*(ghoy-1-tary))
        if ghopath[ghox][ghoy] > 0:
            leftdis = np.sqrt((ghox-tarx)*(ghox-tarx)+(ghoy-tary)*(ghoy-tary))
        if ghopath[ghox+1][ghoy+1] > 0:
            downdis = np.sqrt((ghox+1-tarx)*(ghox+1-tarx)+(ghoy+1-tary)*(ghoy+1-tary))
        if ghopath[ghox+2][ghoy] > 0:
            rightdis = np.sqrt((ghox+2-tarx)*(ghox+2-tarx)+(ghoy-tary)*(ghoy-tary))
        if dirforbid == 1:
            leftdis = 9999
        if (updis <= leftdis and updis <= downdis and updis <= rightdis):
            ghofindway[ghox+1][ghoy] = 8
        elif (leftdis <= downdis and leftdis <= rightdis):
            ghofindway[ghox+1][ghoy] = 4
        elif downdis <= rightdis:
            ghofindway[ghox+1][ghoy] = 2
        else:
            ghofindway[ghox+1][ghoy] = 6
        return ghofindway
    elif ghodir == 8 and ghoy > 1:
        if ghopath[ghox][ghoy-2] > 0:
            updis = np.sqrt((ghox-tarx)*(ghox-tarx)+(ghoy-2-tary)*(ghoy-2-tary))
        if ghopath[ghox-1][ghoy-1] > 0:
            leftdis = np.sqrt((ghox-1-tarx)*(ghox-1-tarx)+(ghoy-1-tary)*(ghoy-1-tary))
        if ghopath[ghox][ghoy] > 0:
            downdis = np.sqrt((ghox-tarx)*(ghox-tarx)+(ghoy-tary)*(ghoy-tary))
        if ghopath[ghox+1][ghoy-1] > 0:
            rightdis = np.sqrt((ghox+1-tarx)*(ghox+1-tarx)+(ghoy-1-tary)*(ghoy-1-tary))
        if dirforbid == 1:
            downdis = 9999
        if (updis <= leftdis and updis <= downdis and updis <= rightdis):
            ghofindway[ghox][ghoy-1] = 8
        elif (leftdis <= downdis and leftdis <= rightdis):
            ghofindway[ghox][ghoy-1] = 4
        elif (downdis <= rightdis):
            ghofindway[ghox][ghoy-1] = 2
        else:
            ghofindway[ghox][ghoy-1] = 6
        return ghofindway
    elif ghodir == 2 and ghoy < 32:
        if ghopath[ghox][ghoy] > 0:
            updis = np.sqrt((ghox-tarx)*(ghox-tarx)+(ghoy-tary)*(ghoy-tary))
        if ghopath[ghox-1][ghoy+1] > 0:
            leftdis = np.sqrt((ghox-1-tarx)*(ghox-1-tarx)+(ghoy+1-tary)*(ghoy+1-tary))
        if ghopath[ghox][ghoy+2] > 0:
            downdis = np.sqrt((ghox-tarx)*(ghox-tarx)+(ghoy+2-tary)*(ghoy+2-tary))
        if ghopath[ghox+1][ghoy+1] > 0:
            rightdis = np.sqrt((ghox+1-tarx)*(ghox+1-tarx)+(ghoy+1-tary)*(ghoy+1-tary))
        if dirforbid == 1:
            updis = 9999
        if (updis <= leftdis and updis <= downdis and updis <= rightdis):
            ghofindway[ghox][ghoy+1] = 8
        elif (leftdis <= downdis and leftdis <= rightdis):
            ghofindway[ghox][ghoy+1] = 4
        elif downdis <= rightdis:
            ghofindway[ghox][ghoy+1] = 2
        else:
            ghofindway[ghox][ghoy+1] = 6
        return ghofindway
    return ghofindway

#画寻路路线
def drawghostway(showarr,ghorfindway,ghopfindway,ghocfindway,ghoofindway,clock,fpsset,
                 ghortarx,ghortary,ghoptarx,ghoptary,ghoctarx,ghoctary,ghootarx,ghootary,dotcount):
    ghoway = np.zeros((28, 34), dtype=int)
    if showarr == 0:
        ghoway = np.zeros((28, 34), dtype=int)
    elif showarr == 1:
        ghoway = copy.deepcopy(ghorfindway)
        if ghortarx < 0:
            ghortarx = 0
        elif ghortarx > 27:
            ghortarx = 27
        if ghortary < 0:
            ghortary = 0
        elif ghortary > 34:
            ghortary = 34
        img_r, img_g, img_b, img_a = ghortarim.split()
        bg.paste(ghortarim,(ghortarx*8,ghortary*8),mask = img_a)
        img_r, img_g, img_b, img_a = showim.split()
        bg.paste(showim,(0*8+4,2*8),mask = img_a)
        if dotcount > 20:
            img_r, img_g, img_b, img_a = blinkyim.split()
            bg.paste(blinkyim,(5*8+2,2*8),mask = img_a)
        elif dotcount > 10:
            img_r, img_g, img_b, img_a = elroy1im.split()
            bg.paste(elroy1im,(5*8+2,2*8),mask = img_a)
        else:
            img_r, img_g, img_b, img_a = elroy2im.split()
            bg.paste(elroy2im,(5*8+2,2*8),mask = img_a)
    elif showarr == 2:
        ghoway = copy.deepcopy(ghopfindway)
        if ghoptarx < 0:
            ghoptarx = 0
        elif ghoptarx > 27:
            ghoptarx = 27
        if ghoptary < 0:
            ghoptary = 0
        elif ghoptary > 34:
            ghoptary = 34
        img_r, img_g, img_b, img_a = ghoptarim.split()
        bg.paste(ghoptarim,(ghoptarx*8,ghoptary*8),mask = img_a)
        img_r, img_g, img_b, img_a = showim.split()
        bg.paste(showim,(0*8+4,2*8),mask = img_a)
        img_r, img_g, img_b, img_a = pinkyim.split()
        bg.paste(pinkyim,(5*8+6,2*8),mask = img_a)
    elif showarr == 3:
        ghoway = copy.deepcopy(ghocfindway)
        if ghoctarx < 0:
            ghoctarx = 0
        elif ghoctarx > 27:
            ghoctarx = 27
        if ghoctary < 0:
            ghoctary = 0
        elif ghoctary > 34:
            ghoctary = 34
        img_r, img_g, img_b, img_a = ghoctarim.split()
        bg.paste(ghoctarim,(ghoctarx*8,ghoctary*8),mask = img_a)
        img_r, img_g, img_b, img_a = showim.split()
        bg.paste(showim,(0*8+4,2*8),mask = img_a)
        img_r, img_g, img_b, img_a = inkyim.split()
        bg.paste(inkyim,(6*8+2,2*8),mask = img_a)
    elif showarr == 4:
        ghoway = copy.deepcopy(ghoofindway)
        if ghootarx < 0:
            ghootarx = 0
        elif ghootarx > 27:
            ghootarx = 27
        if ghootary < 0:
            ghootary = 0
        elif ghootary > 34:
            ghootary = 34
        img_r, img_g, img_b, img_a = ghootarim.split()
        bg.paste(ghootarim,(ghootarx*8,ghootary*8),mask = img_a)
        img_r, img_g, img_b, img_a = showim.split()
        bg.paste(showim,(0*8+4,2*8),mask = img_a)
        img_r, img_g, img_b, img_a = clydeim.split()
        bg.paste(clydeim,(5*8+6,2*8),mask = img_a)
    elif showarr == 5:
        if ghortarx < 0:
            ghortarx = 0
        elif ghortarx > 28:
            ghortarx = 28
        if ghortary < 0:
            ghortary = 0
        elif ghortary > 34:
            ghortary = 34
        img_r, img_g, img_b, img_a = ghortarim.split()
        bg.paste(ghortarim,(ghortarx*8,ghortary*8),mask = img_a)
        if ghoptarx < 0:
            ghoptarx = 0
        elif ghoptarx > 28:
            ghoptarx = 28
        if ghoptary < 0:
            ghoptary = 0
        elif ghoptary > 34:
            ghoptary = 34
        img_r, img_g, img_b, img_a = ghoptarim.split()
        bg.paste(ghoptarim,(ghoptarx*8,ghoptary*8),mask = img_a)
        if ghoctarx < 0:
            ghoctarx = 0
        elif ghoctarx > 28:
            ghoctarx = 28
        if ghoctary < 0:
            ghoctary = 0
        elif ghoctary > 34:
            ghoctary = 34
        img_r, img_g, img_b, img_a = ghoctarim.split()
        bg.paste(ghoctarim,(ghoctarx*8,ghoctary*8),mask = img_a)
        if ghootarx < 0:
            ghootarx = 0
        elif ghootarx > 28:
            ghootarx = 28
        if ghootary < 0:
            ghootary = 0
        elif ghootary > 34:
            ghootary = 34
        img_r, img_g, img_b, img_a = ghootarim.split()
        bg.paste(ghootarim,(ghootarx*8,ghootary*8),mask = img_a)
    for i in range(0,28):
        for j in range(0,34):
            if ghoway[i][j] == 6:
                img_r, img_g, img_b, img_a = rightim.split()
                bg.paste(rightim,(i*8,j*8),mask = img_a)
            elif ghoway[i][j] == 2:
                img_r, img_g, img_b, img_a = downim.split()
                bg.paste(downim,(i*8,j*8),mask = img_a)
            elif ghoway[i][j] == 4:
                img_r, img_g, img_b, img_a = leftim.split()
                bg.paste(leftim,(i*8,j*8),mask = img_a)
            elif ghoway[i][j] == 8:
                img_r, img_g, img_b, img_a = upim.split()
                bg.paste(upim,(i*8,j*8),mask = img_a)
    return showarr

#捉鬼加分
def killghost(killbonus,highscore,countlivesscore):
    if killbonus == 1:
        highscore = highscore + 200
        countlivesscore = countlivesscore + 200
        killbonus = killbonus + 1
    elif killbonus == 2:
        highscore = highscore + 400
        countlivesscore = countlivesscore + 400
        killbonus = killbonus + 1
    elif killbonus == 3:
        highscore = highscore + 800
        countlivesscore = countlivesscore + 800
        killbonus = killbonus + 1
    elif killbonus == 4:
        highscore = highscore + 1600
        countlivesscore = countlivesscore + 1600
        killbonus = killbonus + 1
    return killbonus,highscore,countlivesscore

#ghostpink找目标
def ghopfindtarget(pacdir,pacpos):
    if pacdir == 4:
        ghoptarx = pacpos[0] - 3
        ghoptary = pacpos[1]
    elif pacdir == 6:
        ghoptarx = pacpos[0] + 3
        ghoptary = pacpos[1]
    elif pacdir == 8:
        ghoptarx = pacpos[0] - 3
        ghoptary = pacpos[1] - 3
    elif pacdir == 2:
        ghoptarx = pacpos[0]
        ghoptary = pacpos[1] + 3
    return ghoptarx,ghoptary

#ghostcyan找目标
def ghocfindtarget(ghopos,pacdir,pacpos):
    if pacdir == 4:
        ghotarx = pacpos[0] - 2
        ghotary = pacpos[1]
    elif pacdir == 6:
        ghotarx = pacpos[0] + 2
        ghotary = pacpos[1]
    elif pacdir == 8:
        ghotarx = pacpos[0] - 2
        ghotary = pacpos[1] - 2
    elif pacdir == 2:
        ghotarx = pacpos[0]
        ghotary = pacpos[1] + 2
    ghotarx = ghotarx-(ghopos[0]-ghotarx)
    ghotary = ghotary-(ghopos[1]-ghotary)

    return ghotarx,ghotary

#程序初始化
mapcondori = np.array([
  [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], 
  [1,3,0,0,0,0,3,0,0,0,0,0,3,1,1,3,0,0,0,0,0,3,0,0,0,0,3,1], 
  [1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1], 
  [1,8,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,8,1], 
  [1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1], 
  [1,3,0,0,0,0,3,0,0,3,0,0,3,0,0,3,0,0,3,0,0,3,0,0,0,0,3,1], 
  [1,0,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1], 
  [1,0,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1], 
  [1,3,0,0,0,0,3,1,1,3,0,0,3,1,1,3,0,0,3,1,1,3,0,0,0,0,3,1],
  [1,1,1,1,1,1,0,1,1,1,1,1,6,1,1,6,1,1,1,1,1,0,1,1,1,1,1,1], 
  [1,1,1,1,1,1,0,1,1,1,1,1,6,1,1,6,1,1,1,1,1,0,1,1,1,1,1,1], 
  [1,1,1,1,1,1,0,1,1,5,6,6,5,5,5,5,6,6,5,1,1,0,1,1,1,1,1,1], 
  [1,1,1,1,1,1,0,1,1,6,1,1,1,4,1,1,1,1,6,1,1,0,1,1,1,1,1,1], 
  [1,1,1,1,1,1,0,1,1,6,1,1,1,4,1,1,1,1,6,1,1,0,1,1,1,1,1,1], 
  [2,2,2,2,2,2,3,6,6,5,1,1,5,5,5,1,1,1,5,6,6,3,2,2,2,2,2,2], 
  [1,1,1,1,1,1,0,1,1,6,1,1,1,1,1,1,1,1,6,1,1,0,1,1,1,1,1,1], 
  [1,1,1,1,1,1,0,1,1,6,1,1,1,1,1,1,1,1,6,1,1,0,1,1,1,1,1,1], 
  [1,1,1,1,1,1,0,1,1,5,6,6,6,6,6,6,6,6,5,1,1,0,1,1,1,1,1,1], 
  [1,1,1,1,1,1,0,1,1,6,1,1,1,1,1,1,1,1,6,1,1,0,1,1,1,1,1,1], 
  [1,1,1,1,1,1,0,1,1,6,1,1,1,1,1,1,1,1,6,1,1,0,1,1,1,1,1,1],
  [1,3,0,0,0,0,3,0,0,3,0,0,3,1,1,3,0,0,3,0,0,3,0,0,0,0,3,1], 
  [1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1], 
  [1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1], 
  [1,7,0,3,1,1,3,0,0,3,0,0,3,6,6,3,0,0,3,0,0,3,1,1,3,0,7,1], 
  [1,1,1,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,1,1], 
  [1,1,1,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,1,1], 
  [1,3,0,3,0,0,3,1,1,3,0,0,3,1,1,3,0,0,3,1,1,3,0,0,3,0,3,1], 
  [1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1], 
  [1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1], 
  [1,3,0,0,0,0,0,0,0,0,0,0,3,0,0,3,0,0,0,0,0,0,0,0,0,0,3,1], 
  [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]])#its not sexy but it does the job

mapcond = np.zeros((34, 28), dtype=int)
for i in range(0,34):
    for j in range(0,28):
        mapcond[i][j] = mapcondori[i][j]
r = redirect()
sys.stdout = r
num_level = 0
bgori = copy.deepcopy(mapbgimgim)
num0im = Image.fromarray(num0img)
num1im = Image.fromarray(num1img)
num2im = Image.fromarray(num2img)
num3im = Image.fromarray(num3img)
num4im = Image.fromarray(num4img)
num5im = Image.fromarray(num5img)
num6im = Image.fromarray(num6img)
num7im = Image.fromarray(num7img)
num8im = Image.fromarray(num8img)
num9im = Image.fromarray(num9img)
upim = Image.fromarray(uparrimg)
downim = Image.fromarray(downarrimg)
leftim = Image.fromarray(leftarrimg)
rightim = Image.fromarray(rightarrimg)
ghortarim = Image.fromarray(ghortarimg)
ghoptarim = Image.fromarray(ghoptarimg)
ghoctarim = Image.fromarray(ghoctarimg)
ghootarim = Image.fromarray(ghootarimg)
ready = Image.fromarray(readyimg)
showim = Image.fromarray(showimg)
blinkyim = Image.fromarray(blinkyimg)
elroy1im = Image.fromarray(elroy1img)
elroy2im = Image.fromarray(elroy2img)
pinkyim = Image.fromarray(pinkyimg)
inkyim = Image.fromarray(inkyimg)
clydeim = Image.fromarray(clydeimg)
godmodeonim = Image.fromarray(godmodeonimg)
gameov = Image.fromarray(gameoverimg)
smalldotim = Image.fromarray(smallbeanimg)
bigdotim = Image.fromarray(bigbeanimg)
pacdir = 4
clock = 0
ghoclock = 0
timer = 0
level = 1
smalldot = np.zeros((28, 34), dtype=int)#0
wall = np.zeros((28, 34), dtype=int)#1
tunnel = np.zeros((28, 34), dtype=int)#2
corner = np.zeros((28, 34), dtype=int)#3-有小豆豆的拐弯处
monstart = np.zeros((28, 34), dtype=int)#4
#5-没有豆豆的拐弯处
path = np.zeros((28, 34), dtype=int)#6
ghopath = np.zeros((28, 34), dtype=int)
#7-有大豆豆的拐弯处
bigdot = np.zeros((28, 34), dtype=int)#8
#pacman
pacpos_x = 14*8
pacpos_y = 26*8+4
pacpos_real = np.array([int(pacpos_x),int(pacpos_y)])
pacpos = np.array([14,26])
pacspeed = 0.8
#ghostred
ghorfindway = np.zeros((28, 34), dtype=int)
ghorfindway[13][14] = 4
ghorfindway[12][14] = 4
ghordir = 4
ghorpos_x = 13*8+4
ghorpos_y = 14*8+4
ghorpos_real = np.array([int(ghorpos_x),int(ghorpos_y)])
ghorpos = np.array([13,14])
ghorspeed = 0.75
ghorlive = 1
ghortarx = 26
ghortary = 4
#ghostpink
ghopfindway = np.zeros((28, 34), dtype=int)
ghoppos_x = 13*8+4
ghoppos_y = 17*8+4
ghoppos_real = np.array([int(ghoppos_x),int(ghoppos_y)])
ghoppos = np.array([13,17])
ghopspeed = 0.75
ghopdir = 6
ghoplive = 1
ghopcatch = 0
ghopdotcount = 0
ghopclock = 0
ghoptarx = 1
ghoptary = 4
#ghostcyan
ghocfindway = np.zeros((28, 34), dtype=int)
ghocpos_x = 12*8+4
ghocpos_y = 17*8+4
ghocpos_real = np.array([int(ghocpos_x),int(ghocpos_y)])
ghocpos = np.array([12,17])
ghocspeed = 0.75
ghocdir = 6
ghoclive = 1
ghocsetout = 0
ghoccatch = 0
ghocdotcount = 0
ghocclock = 0
ghocfindway = np.zeros((28, 34), dtype=int)
ghoctarx = 26
ghoctary = 32
#ghostorange
ghoofindway = np.zeros((28, 34), dtype=int)
ghoopos_x = 14*8+4
ghoopos_y = 17*8+4
ghoopos_real = np.array([int(ghoopos_x),int(ghoopos_y)])
ghoopos = np.array([14,17])
ghoospeed = 0.75
ghoodir = 4
ghoolive = 1
ghoosetout = 0
ghoocatch = 0
ghoodotcount = 0
ghooclock = 0
ghoofindway = np.zeros((28, 34), dtype=int)
ghootarx = 1
ghootary = 32
escapetime = 0
levelwaittime = 3*fpsset
eatdot = 0
finalpause = 0
highscore = 0
killbonus = 0
prescore = 0
ghostmode = 1#0-wander,1-chase
lives = 3
countlivesscore = 0
bonus = np.array([0,0,0,0,0,0,0,0])
bonusdraw = np.array([0,0,0,0,0,0,0,0])
bonusdraw[0] = 1
bonuscheck = 0
bonustime = 0
switch1 = 0
switch2 = 0
bon100im = Image.fromarray(bon100img)
bon100imt = 0
bon200im = Image.fromarray(bon200img)
bon200imt = 0
bon300im = Image.fromarray(bon300img)
bon300imt = 0
bon400im = Image.fromarray(bon400img)
bon400imt = 0
bon500im = Image.fromarray(bon500img)
bon500imt = 0
bon700im = Image.fromarray(bon700img)
bon700imt = 0
bon800im = Image.fromarray(bon800img)
bon800imt = 0
bon1000im = Image.fromarray(bon1000img)
bon1000imt = 0
bon1600im = Image.fromarray(bon1600img)
bon1600imt = 0
bon2000im = Image.fromarray(bon2000img)
bon2000imt = 0
bon3000im = Image.fromarray(bon3000img)
bon3000imt = 0
bon5000im = Image.fromarray(bon5000img)
bon5000imt = 0
bontime1 = fpsset*1
bontime3 = fpsset*3
bon200x = 0
bon200y = 0
bon400x = 0
bon400y = 0
bon800x = 0
bon800y = 0
bon1600x = 0
bon1600y = 0
bonfrx = 13*8-2
bonfry = 20*8
bonus1im = Image.fromarray(bonus1img)
bonus2im = Image.fromarray(bonus2img)
bonus3im = Image.fromarray(bonus3img)
bonus4im = Image.fromarray(bonus4img)
bonus5im = Image.fromarray(bonus5img)
bonus6im = Image.fromarray(bonus6img)
bonus7im = Image.fromarray(bonus7img)
bonus8im = Image.fromarray(bonus8img)
temp = 0
showarr = 0
superpac = 0
testoutput = np.zeros((36*8, 28*8, 4), np.uint8)
fpstest1 = 0
fpstest2 = 0
framelag = 20
waitt = int(1000/fpsset)
totalrestart = 1

#开始运行
while(True):
    if countlivesscore > 10000:
        countlivesscore = countlivesscore - 10000
        lives = lives + 1
    fpstest1 = fpstest2
    fpstest2 = time.time()
    if fpstest2 - fpstest1 < 0.1:
        framelag = int((fpstest2 - fpstest1)*1000)
    if framelag > int(1000/fpsset):
        waitt = waitt - abs(waitt-framelag)
    else:
        waitt = waitt + abs(waitt-framelag)
    bg = copy.deepcopy(bgori)
    dotcount = 0
    levelcheck = 0
    kpress = 0
    if bon100imt > 0:
        bon100imt = bon100imt - 1
    if bon200imt > 0:
        bon200imt = bon200imt - 1
    if bon300imt > 0:
        bon300imt = bon300imt - 1
    if bon400imt > 0:
        bon400imt = bon400imt - 1
    if bon500imt > 0:
        bon500imt = bon500imt - 1
    if bon700imt > 0:
        bon700imt = bon700imt - 1
    if bon800imt > 0:
        bon800imt = bon800imt - 1
    if bon1000imt > 0:
        bon1000imt = bon1000imt - 1
    if bon1600imt > 0:
        bon1600imt = bon1600imt - 1
    if bon2000imt > 0:
        bon2000imt = bon2000imt - 1
    if bon3000imt > 0:
        bon3000imt = bon3000imt - 1
    if bon5000imt > 0:
        bon5000imt = bon5000imt - 1
    #按键检测
    keyboard.on_press_key("0", lambda _:sys.stdout.write("h"))
    if (r.content!='' and kpress == 0 and r.content[0] == 'h'):
        showarr = 0
        r.content = ''
    keyboard.on_press_key("1", lambda _:sys.stdout.write("r"))
    if (r.content!='' and kpress == 0 and r.content[0] == 'r'):
        showarr = 1
        r.content = ''
    keyboard.on_press_key("2", lambda _:sys.stdout.write("b"))
    if (r.content!='' and kpress == 0 and r.content[0] == 'b'):
        showarr = 2
        r.content = ''
    keyboard.on_press_key("3", lambda _:sys.stdout.write("c"))
    if (r.content!='' and kpress == 0 and r.content[0] == 'c'):
        showarr = 3
        r.content = ''
    keyboard.on_press_key("4", lambda _:sys.stdout.write("o"))
    if (r.content!='' and kpress == 0 and r.content[0] == 'o'):
        showarr = 4
        r.content = ''
    keyboard.on_press_key("5", lambda _:sys.stdout.write("l"))
    if (r.content!='' and kpress == 0 and r.content[0] == 'l'):
        showarr = 5
        r.content = ''
    keyboard.on_press_key("9", lambda _:sys.stdout.write("s"))
    if (r.content!='' and kpress == 0 and r.content[0] == 's'):
        superpac = 1
        r.content = ''
    keyboard.on_press_key("8", lambda _:sys.stdout.write("n"))
    if (r.content!='' and kpress == 0 and r.content[0] == 'n'):
        superpac = 0
        r.content = ''
    keyboard.on_press_key("p", lambda _:sys.stdout.write("5"))
    if (r.content!='' and kpress == 0 and r.content[0] == '5'):
        break
    keyboard.on_press_key("a", lambda _:sys.stdout.write("4"))
    if (r.content!='' and kpress == 0 and r.content[0] == '4'):
        kpress = int(r.content[0])
        r.content = ''
    keyboard.on_press_key("w", lambda _:sys.stdout.write("8"))
    if (r.content!='' and kpress == 0 and r.content[0] == '8'):
        kpress = int(r.content[0])
        r.content = ''
    keyboard.on_press_key("d", lambda _:sys.stdout.write("6"))
    if (r.content!='' and kpress == 0 and r.content[0] == '6'):
        kpress = int(r.content[0])
        r.content = ''
    keyboard.on_press_key("s", lambda _:sys.stdout.write("2"))
    if (r.content!='' and kpress == 0 and r.content[0] == '2'):
        kpress = int(r.content[0])
        r.content = ''
    for i in range(0,34):
        for j in range(0,28):
            if mapcond[i][j] == 0:
                path[j][i] = 1
                ghopath[j][i] = 1
                smalldot[j][i] = 1
                dotcount = dotcount + 1
            if mapcond[i][j] == 1:
                wall[j][i] = 1
            if mapcond[i][j] == 2:
                path[j][i] = 2
                ghopath[j][i] = 1
                tunnel[j][i] = 1
            if mapcond[i][j] == 3:
                path[j][i] = 1
                ghopath[j][i] = 1
                smalldot[j][i] = 1
                dotcount = dotcount + 1
                corner[j][i] = 1
            if mapcond[i][j] == 4:
                monstart[j][i] = 1
                ghopath[j][i] = 1
            if mapcond[i][j] == 5:
                path[j][i] = 1
                ghopath[j][i] = 1
                corner[j][i] = 1
            if mapcond[i][j] == 6:
                path[j][i] = 1
                ghopath[j][i] = 1
            if mapcond[i][j] == 7:
                corner[j][i] = 1
                path[j][i] = 1
                ghopath[j][i] = 1
                bigdot[j][i] = 1
                dotcount = dotcount + 1
            if mapcond[i][j] == 8:
                path[j][i] = 1
                ghopath[j][i] = 1
                bigdot[j][i] = 1
                dotcount = dotcount + 1
    clock = clock + 1#帧数+1
    #释放ghostcyan和ghostorange
    ghocsetout = 0
    ghoosetout = 0
    if dotcount == 0:#判断剩余豆子数量
        levelcheck = 1
    if level == 1:
        if 244-dotcount >29:
            ghocsetout = 1
        if 244-dotcount >59:
            ghoosetout = 1
    elif level == 2:
        ghocsetout = 1
        if 244-dotcount >49:
            ghoosetout = 1
    else:
        ghocsetout = 1
        ghoosetout = 1
    #奖励
    if (244-dotcount == 70 and switch1 == 0):
        bonuscheck = 1
        bonustime = clock
        switch1 = 1
    if (244-dotcount == 170 and switch2 == 0):
        bonuscheck = 1
        bonustime = clock
        switch2 = 1
    if bonuscheck == 1:
        if clock - bonustime > 10*fpsset:
            bonuscheck = 0
        if (13*8+4 <= pacpos_real[0] and pacpos_real[0] <= 14*8+4 and pacpos[1] == 20):
            bonuscheck = 0
            if level == 1:
                highscore = highscore + 100
                countlivesscore = countlivesscore + 100
                bonus[0] = bonus[0] + 1
                bon100imt = bontime3
            elif level < 3:
                highscore = highscore + 300
                countlivesscore = countlivesscore + 300
                bonus[1] = bonus[1] + 1
                bon300imt = bontime3
            elif level < 5:
                highscore = highscore + 500
                countlivesscore = countlivesscore + 500
                bonus[2] = bonus[2] + 1
                bon500imt = bontime3
            elif level < 7:
                highscore = highscore + 700
                countlivesscore = countlivesscore + 700
                bonus[3] = bonus[3] + 1
                bon700imt = bontime3
            elif level < 9:
                highscore = highscore + 1000
                countlivesscore = countlivesscore + 1000
                bonus[4] = bonus[4] + 1
                bon1000imt = bontime3
            elif level < 11:
                highscore = highscore + 2000
                countlivesscore = countlivesscore + 2000
                bonus[5] = bonus[5] + 1
                bon2000imt = bontime3
            elif level < 13:
                highscore = highscore + 3000
                countlivesscore = countlivesscore + 3000
                bonus[6] = bonus[6] + 1
                bon3000imt = bontime3
            else:
                highscore = highscore + 5000
                countlivesscore = countlivesscore + 5000
                bonus[7] = bonus[7] + 1
                bon5000imt = bontime3
    if levelwaittime > 0:#局间暂停
        levelwaittime = levelwaittime - 1
        #画ready
        img_r, img_g, img_b, img_a = ready.split()
        bg.paste(ready,(11*8,20*8),mask = img_a)
        clock = clock - 1
        if levelwaittime == 1:
            if pacdir != 4:
                kpress = 4
                pacdir = 4
                levelwaittime = levelwaittime + 1
        r.content = ''
    elif levelcheck == 0:#游戏中
        ghotargets = 2
        pacmove = 0
        pacturn = 0
        #判断无敌时间
        if escapetime > 0:
            escapetime = escapetime - 1
        else:
            ghoclock = ghoclock + 1
            if ghorlive == 0:
                ghorlive = 1
            if ghoplive == 0:
                ghoplive = 1
            if ghoclive == 0:
                ghoclive = 1
            if ghoolive == 0:
                ghoolive = 1
            if level == 1:
                if ghoclock < 7*fpsset:
                    ghostmode = 0
                elif ghoclock < (7+20)*fpsset:
                    ghostmode = 1
                    if ghoclock == 7*fpsset:
                        ghotargets = 1
                elif ghoclock < (7+20+7)*fpsset:
                    ghostmode = 0
                    if ghoclock == (7+20)*fpsset:
                        ghotargets = 0
                elif ghoclock < (7+20+7+20)*fpsset:
                    ghostmode = 1
                    if ghoclock == (7+20+7)*fpsset:
                        ghotargets = 1
                elif ghoclock < (7+20+7+20+5)*fpsset:
                    ghostmode = 0
                    if ghoclock == (7+20+7+20)*fpsset:
                        ghotargets = 0
                elif ghoclock < (7+20+7+20+5+20)*fpsset:
                    ghostmode = 1
                    if ghoclock == (7+20+7+20+5)*fpsset:
                        ghotargets = 1
                elif ghoclock < (7+20+7+20+5+20+5)*fpsset:
                    ghostmode = 0
                    if ghoclock == (7+20+7+20+5+20)*fpsset:
                        ghotargets = 0
                else:
                    ghostmode = 1
                    if ghoclock == (7+20+7+20+5+20+5)*fpsset:
                        ghotargets = 1
            elif level < 5:
                if ghoclock < 7*fpsset:
                    ghostmode = 0
                elif ghoclock < (7+20)*fpsset:
                    ghostmode = 1
                    if ghoclock == 7*fpsset:
                        ghotargets = 1
                elif ghoclock < (7+20+7)*fpsset:
                    ghostmode = 0
                    if ghoclock == (7+20)*fpsset:
                        ghotargets = 0
                elif ghoclock < (7+20+7+20)*fpsset:
                    ghostmode = 1
                    if ghoclock == (7+20+7)*fpsset:
                        ghotargets = 1
                elif ghoclock < (7+20+7+20+5)*fpsset:
                    ghostmode = 0
                    if ghoclock == (7+20+7+20)*fpsset:
                        ghotargets = 0
                elif ghoclock < (7+20+7+20+5+1033)*fpsset:
                    ghostmode = 1
                    if ghoclock == (7+20+7+20+5)*fpsset:
                        ghotargets = 1
                elif ghoclock < (7+20+7+20+5+1033)*fpsset+1:
                    ghostmode = 0
                    if ghoclock == (7+20+7+20+5+1033)*fpsset:
                        ghotargets = 0
                else:
                    ghostmode = 1
                    if ghoclock == (7+20+7+20+5+1033)*fpsset+1:
                        ghotargets = 1
            else:
                if ghoclock < 5*fpsset:
                    ghostmode = 0
                elif ghoclock < (5+20)*fpsset:
                    ghostmode = 1
                    if ghoclock == 5*fpsset:
                        ghotargets = 1
                elif ghoclock < (5+20+5)*fpsset:
                    ghostmode = 0
                    if ghoclock == (5+20)*fpsset:
                        ghotargets = 0
                elif ghoclock < (5+20+5+20)*fpsset:
                    ghostmode = 1
                    if ghoclock == (5+20+5)*fpsset:
                        ghotargets = 1
                elif ghoclock < (5+20+5+20+5)*fpsset:
                    ghostmode = 0
                    if ghoclock == (5+20+5+20)*fpsset:
                        ghotargets = 0
                elif ghoclock < (5+20+5+20+5+1037)*fpsset:
                    ghostmode = 1
                    if ghoclock == (5+20+5+20+5)*fpsset:
                        ghotargets = 1
                elif ghoclock < (5+20+5+20+5+1037)*fpsset+1:
                    ghostmode = 0
                    if ghoclock == (5+20+5+20+5+1037)*fpsset:
                        ghotargets = 0
                else:
                    ghostmode = 1
                    if ghoclock == (5+20+5+20+5+1037)*fpsset+1:
                        ghotargets = 1
            if ghotargets == 1:
                ghortarx = pacpos[0]
                ghortary = pacpos[1]
                ghoptarx,ghoptary = ghopfindtarget(pacdir,pacpos)
                ghoctarx,ghoctary = ghocfindtarget(ghorpos,pacdir,pacpos)
                if (abs(ghoopos_real[0]-pacpos_real[0])+abs(ghoopos_real[1]-pacpos_real[1])) > 65:
                    ghootarx = pacpos[0]
                    ghootary = pacpos[1]
                else:
                    ghootarx = int(time.time()*100000+time.time()*ghootarx*100) % 29
                    ghootary = int(time.time()*100000+time.time()*ghootary*100) % 35
                ghorfindway = finddir(ghorpos[0],ghorpos[1],ghortarx,ghortary,ghopath,ghorfindway,0,ghordir,ghorlive)
                ghopfindway = finddir(ghoppos[0],ghoppos[1],ghoptarx,ghoptary,ghopath,ghopfindway,0,ghopdir,ghoplive)
                ghocfindway = finddir(ghocpos[0],ghocpos[1],ghoctarx,ghoctary,ghopath,ghocfindway,0,ghocdir,ghoclive)
                ghoofindway = finddir(ghoopos[0],ghoopos[1],ghootarx,ghootary,ghopath,ghoofindway,0,ghoodir,ghoolive)
            elif ghotargets == 0:
                ghortarx = 26
                ghortary = 4
                ghoptarx = 1
                ghoptary = 4
                ghoctarx = 26
                ghoctary = 32
                ghootarx = 1
                ghootary = 32
                ghorfindway = finddir(ghorpos[0],ghorpos[1],ghortarx,ghortary,ghopath,ghorfindway,0,ghordir,ghorlive)
                ghopfindway = finddir(ghoppos[0],ghoppos[1],ghoptarx,ghoptary,ghopath,ghopfindway,0,ghopdir,ghoplive)
                ghocfindway = finddir(ghocpos[0],ghocpos[1],ghoctarx,ghoctary,ghopath,ghocfindway,0,ghocdir,ghoclive)
                ghoofindway = finddir(ghoopos[0],ghoopos[1],ghootarx,ghootary,ghopath,ghoofindway,0,ghoodir,ghoolive)
            ghotargets = 2
        #pacman速度
        if level == 1:
            if escapetime == 0:
                pacspeed = 0.8
            else:
                pacspeed = 0.9
        elif level < 5:
            if escapetime == 0:
                pacspeed = 0.9
            else:
                pacspeed = 0.95
        elif level < 21:
            if escapetime == 0:
                pacspeed = 1
            else:
                pacspeed = 1
        else:
            pacspeed = 0.9
        #pacman运动       
        if (pacdir == 4 and pacmove == 0 and eatdot == 0):#pacman向左
            if (pacpos_x)<8:#隧道传送
                pacpos_x = 27*8
                pacpos[0] = 27
            if (pacpos_real[0])/8-pacpos[0]<0:#确定坐标
                pacpos[0] = pacpos[0]-1
            if (0<pacpos[0] and pacpos[0]<27):#判断墙壁
                if wall[pacpos[0]-1][pacpos[1]] == 1:
                    if pacpos_x-pacpos[0]*8<=4:
                        pacpos_x = pacpos[0]*8 + 4
                        pacmove = 1
            if pacmove == 0:
                pacpos_x = pacpos_x - 1*pacspeed*speedset#移动1步
            pacmove = 1
            if (kpress == 6 and pacturn == 0):#转向
                pacdir = 6
                pacturn = 1
                kpress = 0
            if (kpress == 8 and pacturn == 0 and path[pacpos[0]][pacpos[1]-1]>=1):
                pacdir = 8
                pacturn = 1
                kpress = 0
                pacpos_y = pacpos[1]*8+4-(pacpos_x-(pacpos[0]*8+4))
                pacpos_x = pacpos[0]*8+4
            if (kpress == 2 and pacturn == 0 and path[pacpos[0]][pacpos[1]+1]>=1):
                pacdir = 2
                pacturn = 1
                kpress = 0
                pacpos_y = pacpos[1]*8+4+(pacpos_x-(pacpos[0]*8+4))
                pacpos_x = pacpos[0]*8+4
        if (pacdir == 2 and pacmove == 0 and eatdot == 0):#pacman向下
            if (pacpos_real[1]+1)/8-(pacpos[1]+1)>=0:#确定坐标
                pacpos[1] = pacpos[1]+1
            if wall[pacpos[0]][pacpos[1]+1] == 1:#判断墙壁
                if (pacpos[1]+1)*8-pacpos_y<=4:
                    pacpos_y = pacpos[1]*8 + 4
                    pacmove = 1
            if pacmove == 0:
                pacpos_y = pacpos_y + 1*pacspeed*speedset#移动1步
            pacmove = 1
            if (kpress == 8 and pacturn == 0):#转向
                pacdir = 8
                pacturn = 1
                kpress = 0
            if (kpress == 4 and pacturn == 0 and path[pacpos[0]-1][pacpos[1]]>=1):
                pacdir = 4
                pacturn = 1
                kpress = 0
                pacpos_x = pacpos[0]*8+4-(pacpos[1]*8+4-pacpos_y)
                pacpos_y = pacpos[1]*8+4
            if (kpress == 6 and pacturn == 0 and path[pacpos[0]+1][pacpos[1]]>=1):
                pacdir = 6
                pacturn = 1
                kpress = 0
                pacpos_x = pacpos[0]*8+4+(pacpos[1]*8+4-pacpos_y)
                pacpos_y = pacpos[1]*8+4
        if (pacdir == 6 and pacmove == 0 and eatdot == 0):#pacman向右
            if (pacpos_x)>27*8:#隧道传送
                pacpos_x = 8
                pacpos[0] = 1
            if (pacpos_real[0]+1)/8-(pacpos[0]+1)>=0:#确定坐标
                pacpos[0] = pacpos[0]+1
            if (0<pacpos[0] and pacpos[0]<27):
                if wall[pacpos[0]+1][pacpos[1]] == 1:#判断墙壁
                    if (pacpos[0]+1)*8-pacpos_x<=4:
                        pacpos_x = pacpos[0]*8 + 4
                        pacmove = 1
            if pacmove == 0:
                pacpos_x = pacpos_x + 1*pacspeed*speedset#移动1步
            pacmove = 1
            if (kpress == 4 and pacturn == 0):#转向
                pacdir = 4
                pacturn = 1
                kpress = 0
            if (kpress == 8 and pacturn == 0 and path[pacpos[0]][pacpos[1]-1]>=1):
                pacdir = 8
                pacturn = 1
                kpress = 0
                pacpos_y = pacpos[1]*8+4-(pacpos[0]*8+4-pacpos_x)
                pacpos_x = pacpos[0]*8+4
            if (kpress == 2 and pacturn == 0 and path[pacpos[0]][pacpos[1]+1]>=1):
                pacdir = 2
                pacturn = 1
                kpress = 0
                pacpos_y = pacpos[1]*8+4+(pacpos[0]*8+4-pacpos_x)
                pacpos_x = pacpos[0]*8+4
        if (pacdir == 8 and pacmove == 0 and eatdot == 0):#pacman向上
            if pacpos_real[1]/8-pacpos[1]<0:#确定坐标
                pacpos[1] = pacpos[1]-1
            if wall[pacpos[0]][pacpos[1]-1] == 1:#判断墙壁
                if pacpos_y-pacpos[1]*8<=4:
                    pacpos_y = pacpos[1]*8 + 4
                    pacmove = 1
            if pacmove == 0:
                pacpos_y = pacpos_y - 1*pacspeed*speedset#移动1步
            pacmove = 1
            if (kpress == 2 and pacturn == 0):#转向
                pacdir = 2
                pacturn = 1
                kpress = 0
            if (kpress == 4 and pacturn == 0 and path[pacpos[0]-1][pacpos[1]]>=1):
                pacdir = 4
                pacturn = 1
                kpress = 0
                pacpos_x = pacpos[0]*8+4-(pacpos_y-(pacpos[1]*8+4))
                pacpos_y = pacpos[1]*8+4
            if (kpress == 6 and pacturn == 0 and path[pacpos[0]+1][pacpos[1]]>=1):
                pacdir = 6
                pacturn = 1
                kpress = 0
                pacpos_x = pacpos[0]*8+4+(pacpos_y-(pacpos[1]*8+4))
                pacpos_y = pacpos[1]*8+4
        pacpos_real[0] = int(pacpos_x)
        pacpos_real[1] = int(pacpos_y)
        #ghostred运动
        #速度
        if ghorlive == -1:
            ghorspeed = 2
        else:
            if level == 1:
                if ghorlive == 1:
                    if dotcount > 20:
                        ghorspeed = 0.75
                    elif dotcount > 10:
                        ghorspeed = 0.8
                    else:
                        ghorspeed = 0.9
                else:
                    ghorspeed = 0.5
                if tunnel[ghorpos[0]][ghorpos[1]] == 1:
                    ghorspeed = 0.4
            elif level < 5:
                if ghorlive == 1:
                    if dotcount > 20:
                        ghorspeed = 0.85
                    elif dotcount > 10:
                        ghorspeed = 0.9
                    else:
                        ghorspeed = 0.95
                else:
                    ghorspeed = 0.55
                if tunnel[ghorpos[0]][ghorpos[1]] == 1:
                    ghorspeed = 0.45
            else:
                if ghorlive == 1:
                    if dotcount > 20:
                        ghorspeed = 0.95
                    elif dotcount > 10:
                        ghorspeed = 1
                    else:
                        ghorspeed = 1.05
                else:
                    ghorspeed = 0.6
                if tunnel[ghorpos[0]][ghorpos[1]] == 1:
                    ghorspeed = 0.5
        if (10<ghorpos[0] and ghorpos[0]<17 and 16<ghorpos[1] and ghorpos[1]<19):
            ghorlive = 1
            ghorpos_x = ghorpos[0]*8+4
            ghorfindway[ghorpos[0]][ghorpos[1]] = 8
            ghorfindway[ghorpos[0]][ghorpos[1]-1] = 8
            ghordir = 8
        if ghorlive == 1:
            if ghostmode == 1:
                ghortarx = pacpos[0]
                ghortary = pacpos[1]
            elif ghostmode == 0:
                ghortarx = 26
                ghortary = 4
        elif ghorlive == -1:
            ghortarx = 13
            ghortary = 17
        else:
            ghortarx = int(time.time()*100000+time.time()*ghortarx*100) % 29
            ghortary = int(time.time()*100000+time.time()*ghortary*100) % 35
        ghorfindway = finddir(ghorpos[0],ghorpos[1],ghortarx,ghortary,ghopath,ghorfindway,1,ghordir,ghorlive)
        if (abs(ghorpos[0]*8+4 - ghorpos_real[0])<1.2*ghorspeed*speedset and abs(ghorpos[1]*8+4 - ghorpos_real[1])<1.2*ghorspeed*speedset):
            ghordir = ghorfindway[ghorpos[0]][ghorpos[1]]
        if (ghordir == 2 or ghordir == 8):
            ghorpos_x = ghorpos[0]*8+4
        elif (ghordir == 4 or ghordir == 6):
            ghorpos_y = ghorpos[1]*8+4
        if ghordir == 4:
            if ((ghorpos_x)<8 and ghorpos[1] == 17):#隧道传送
                ghorpos_x = 27*8
                ghorpos[0] = 27
                ghorfindway[ghorpos[0]][ghorpos[1]] = 4
                ghorfindway[ghorpos[0]-1][ghorpos[1]] = 4
            if (ghorpos_real[0])/8-ghorpos[0]<0:#确定坐标
                ghorpos[0] = ghorpos[0]-1
            ghorpos_x = ghorpos_x - 1*ghorspeed*speedset#移动1步
        elif ghordir == 6:
            if ((ghorpos_x)>27*8-1 and ghorpos[1] == 17):#隧道传送
                ghorpos_x = 8
                ghorpos[0] = 1
                ghorfindway[ghorpos[0]][ghorpos[1]] = 6
                ghorfindway[ghorpos[0]+1][ghorpos[1]] = 6
            if (ghorpos_real[0]+1)/8-(ghorpos[0]+1)>=0:#确定坐标
                ghorpos[0] = ghorpos[0]+1
            ghorpos_x = ghorpos_x + 1*ghorspeed*speedset#移动1步
        elif ghordir == 2:
            if (ghorpos_real[1]+1)/8-(ghorpos[1]+1)>=0:#确定坐标
                ghorpos[1] = ghorpos[1]+1
            ghorpos_y = ghorpos_y + 1*ghorspeed*speedset#移动1步
        elif ghordir == 8:
            if ghorpos_real[1]/8-ghorpos[1]<0:#确定坐标
                ghorpos[1] = ghorpos[1]-1
            ghorpos_y = ghorpos_y - 1*ghorspeed*speedset#移动1步
        ghorpos_real[0] = int(ghorpos_x)
        ghorpos_real[1] = int(ghorpos_y)
        #ghostpink运动
        #速度
        if ghoplive == -1:
            ghopspeed = 2
        else:
            if level == 1:
                if ghoplive == 1:
                    ghopspeed = 0.75
                else:
                    ghopspeed = 0.5
                if tunnel[ghoppos[0]][ghoppos[1]] == 1:
                    ghopspeed = 0.4
            elif level < 5:
                if ghoplive == 1:
                    ghopspeed = 0.85
                else:
                    ghopspeed = 0.55
                if tunnel[ghoppos[0]][ghoppos[1]] == 1:
                    ghopspeed = 0.45
            else:
                if ghoplive == 1:
                    ghopspeed = 0.95
                else:
                    ghopspeed = 0.6
                if tunnel[ghoppos[0]][ghoppos[1]] == 1:
                    ghopspeed = 0.5
        #被抓住释放
        if (ghoppos[0] == 13 and (17*8+3<ghoppos_real[1] and ghoppos_real[1]<18*8)):
            if ghoplive == -1:
                ghoplive = 1
            if level < 5:
                checktime = 4*fpsset
            else:
                checktime = 3*fpsset
            if (ghopcatch == 1 and (ghopdotcount < 8 and ghopclock <= checktime)):
                ghopspeed = 0
                ghopclock = ghopclock + 1
            else:
                ghopcatch = 0
                ghopclock = 0
                ghopdotcount = 0
                ghopdir = 8
                ghoppos_x = ghoppos[0]*8+4
        if ghoplive == 1:
            if ghostmode == 1:
                ghoptarx,ghoptary = ghopfindtarget(pacdir,pacpos)
            elif ghostmode == 0:
                ghoptarx = 1
                ghoptary = 4
        elif ghoplive == -1:
            ghoptarx = 13
            ghoptary = 17
        else:
            ghoptarx = int(time.time()*100000+time.time()*ghoptarx*100) % 29
            ghoptary = int(time.time()*100000+time.time()*ghoptary*100) % 35
        ghopfindway = finddir(ghoppos[0],ghoppos[1],ghoptarx,ghoptary,ghopath,ghopfindway,1,ghopdir,ghoplive)
        if ghoplive >= 0:
            ghopfindway[13][17] = 8
            ghopfindway[13][16] = 8
            ghopfindway[13][15] = 8
        if (abs(ghoppos[0]*8+4 - ghoppos_real[0])<1.2*ghopspeed*speedset and abs(ghoppos[1]*8+4 - ghoppos_real[1])<1.2*ghopspeed*speedset):
            ghopdir = ghopfindway[ghoppos[0]][ghoppos[1]]
        if (ghopdir == 2 or ghopdir == 8):
            ghoppos_x = ghoppos[0]*8+4
        elif (ghopdir == 4 or ghopdir == 6):
            ghoppos_y = ghoppos[1]*8+4
        if ghopdir == 4:
            if ((ghoppos_x)<8 and ghoppos[1] == 17):#隧道传送
                ghoppos_x = 27*8
                ghoppos[0] = 27
                ghopfindway[ghoppos[0]][ghoppos[1]] = 4
                ghopfindway[ghoppos[0]-1][ghoppos[1]] = 4
            if (ghoppos_real[0])/8-ghoppos[0]<0:#确定坐标
                ghoppos[0] = ghoppos[0]-1
            ghoppos_x = ghoppos_x - 1*ghopspeed*speedset#移动1步
        elif ghopdir == 6:
            if ((ghoppos_x)>27*8-1 and ghoppos[1] == 17):#隧道传送
                ghoppos_x = 8
                ghoppos[0] = 1
                ghopfindway[ghoppos[0]][ghoppos[1]] = 6
                ghopfindway[ghoppos[0]+1][ghoppos[1]] = 6
            if (ghoppos_real[0]+1)/8-(ghoppos[0]+1)>=0:#确定坐标
                ghoppos[0] = ghoppos[0]+1
            ghoppos_x = ghoppos_x + 1*ghopspeed*speedset#移动1步
        elif ghopdir == 2:
            if (ghoppos_real[1]+1)/8-(ghoppos[1]+1)>=0:#确定坐标
                ghoppos[1] = ghoppos[1]+1
            ghoppos_y = ghoppos_y + 1*ghopspeed*speedset#移动1步
        elif ghopdir == 8:
            if ghoppos_real[1]/8-ghoppos[1]<0:#确定坐标
                ghoppos[1] = ghoppos[1]-1
            ghoppos_y = ghoppos_y - 1*ghopspeed*speedset#移动1步
        ghoppos_real[0] = int(ghoppos_x)
        ghoppos_real[1] = int(ghoppos_y)
        #ghostcyan运动
        #速度
        if ghoclive == -1:
            ghocspeed = 2
        else:
            if level == 1:
                if ghoclive == 1:
                    ghocspeed = 0.75
                else:
                    ghocspeed = 0.5
                if tunnel[ghocpos[0]][ghocpos[1]] == 1:
                    ghocspeed = 0.4
            elif level < 5:
                if ghoclive == 1:
                    ghocspeed = 0.85
                else:
                    ghocspeed = 0.55
                if tunnel[ghocpos[0]][ghocpos[1]] == 1:
                    ghocspeed = 0.45
            else:
                if ghoclive == 1:
                    ghocspeed = 0.95
                else:
                    ghocspeed = 0.6
                if tunnel[ghocpos[0]][ghocpos[1]] == 1:
                    ghocspeed = 0.5
        #被抓住释放
        if ((11*8-4 < ghocpos_real[0] and ghocpos_real[0] < 15*8+4) and (15*8-4 < ghocpos_real[1] and ghocpos_real[1] < 16*8+4)):
            ghocpos_x = 13*8+4
        if (ghocpos[0] == 12 and ghocpos[1] == 17):
            if ghocsetout == 0:
                ghocspeed = 0
            else:
                if ghoclive == -1:
                    ghoclive = 1
                if level < 5:
                    checktime = 4*fpsset
                else:
                    checktime = 3*fpsset
                if (ghoccatch == 1 and (ghocdotcount < 18 and ghocclock <= checktime)):
                    ghocdir = 6
                    ghocspeed = 0
                    ghocclock = ghocclock + 1
                else:
                    ghoccatch = 0
                    ghocclock = 0
                    ghocdotcount = 0
                    ghocdir = 6
                if ghocdir == 6:
                    ghocpos_y = ghocpos[1]*8+4
                elif ghocdir == 8:
                    ghocpos_x = ghocpos[0]*8+4
        if ghoclive == 1:
            if ghostmode == 1:
                ghoctarx,ghoctary = ghocfindtarget(ghorpos,pacdir,pacpos)
            elif ghostmode == 0:
                ghoctarx = 26
                ghoctary = 32
        elif ghoclive == -1:
            ghoctarx = 12
            ghoctary = 17
        else:
            ghoctarx = int(time.time()*100000 + time.time()*ghoctarx*100) % 29
            ghoctary = int(time.time()*100000 + time.time()*ghoctary*100) % 35
        ghocfindway = finddir(ghocpos[0],ghocpos[1],ghoctarx,ghoctary,ghopath,ghocfindway,1,ghocdir,ghoclive)
        if ghoclive >= 0:
            ghocfindway[12][17] = 6
            ghocfindway[13][17] = 8
            ghocfindway[13][16] = 8
            ghocfindway[13][15] = 8
        if (abs(ghocpos[0]*8+4 - ghocpos_real[0])<1.2*ghocspeed*speedset and abs(ghocpos[1]*8+4 - ghocpos_real[1])<1.2*ghocspeed*speedset):
            ghocdir = ghocfindway[ghocpos[0]][ghocpos[1]]
        if (ghocdir == 2 or ghocdir == 8):
            ghocpos_x = ghocpos[0]*8+4
        elif (ghocdir == 4 or ghocdir == 6):
            ghocpos_y = ghocpos[1]*8+4
        if ghocdir == 4:
            if ((ghocpos_x)<8 and ghocpos[1] == 17):#隧道传送
                ghocpos_x = 27*8
                ghocpos[0] = 27
                ghocfindway[ghocpos[0]][ghocpos[1]] = 4
                ghocfindway[ghocpos[0]-1][ghocpos[1]] = 4
            if (ghocpos_real[0])/8-ghocpos[0]<0:#确定坐标
                ghocpos[0] = ghocpos[0]-1
            ghocpos_x = ghocpos_x - 1*ghocspeed*speedset#移动1步
        elif ghocdir == 6:
            if ((ghocpos_x)>27*8-1 and ghocpos[1] == 17):#隧道传送
                ghocpos_x = 8
                ghocpos[0] = 1
                ghocfindway[ghocpos[0]][ghocpos[1]] = 6
                ghocfindway[ghocpos[0]+1][ghocpos[1]] = 6
            if (ghocpos_real[0]+1)/8-(ghocpos[0]+1)>=0:#确定坐标
                ghocpos[0] = ghocpos[0]+1
            ghocpos_x = ghocpos_x + 1*ghocspeed*speedset#移动1步
        elif ghocdir == 2:
            if (ghocpos_real[1]+1)/8-(ghocpos[1]+1)>=0:#确定坐标
                ghocpos[1] = ghocpos[1]+1
            ghocpos_y = ghocpos_y + 1*ghocspeed*speedset#移动1步
        elif ghocdir == 8:
            if ghocpos_real[1]/8-ghocpos[1]<0:#确定坐标
                ghocpos[1] = ghocpos[1]-1
            ghocpos_y = ghocpos_y - 1*ghocspeed*speedset#移动1步
        ghocpos_real[0] = int(ghocpos_x)
        ghocpos_real[1] = int(ghocpos_y)
        #ghostorange运动
        #速度
        if ghoolive == -1:
            ghoospeed = 2
        else:
            if level == 1:
                if ghoolive == 1:
                    ghoospeed = 0.75
                else:
                    ghoospeed = 0.5
                if tunnel[ghoopos[0]][ghoopos[1]] == 1:
                    ghoospeed = 0.4
            elif level < 5:
                if ghoolive == 1:
                    ghoospeed = 0.85
                else:
                    ghoospeed = 0.55
                if tunnel[ghoopos[0]][ghoopos[1]] == 1:
                    ghoospeed = 0.45
            else:
                if ghoolive == 1:
                    ghoospeed = 0.95
                else:
                    ghoospeed = 0.6
                if tunnel[ghoopos[0]][ghoopos[1]] == 1:
                    ghoospeed = 0.5
        #被抓住释放
        if (ghoopos[0] == 14 and ghoopos[1] == 17):
        #if ((ghoopos[0] == 13 or ghoopos[0] == 14) and (16*8-4 < ghoopos_real[1] and ghoopos_real[1] < 18*8+4)):
            if ghoosetout == 0:
                ghoospeed = 0
            else:
                if ghoolive == -1:
                    ghoolive = 1
                if level < 5:
                    checktime = 4*fpsset
                else:
                    checktime = 3*fpsset
                if (ghoocatch == 1 and (ghoodotcount < 33 and ghooclock <= checktime)):
                    ghoodir = 4
                    ghoospeed = 0
                    ghooclock = ghooclock + 1
                else:
                    ghoocatch = 0
                    ghooclock = 0
                    ghoodotcount = 0
                    ghoodir = 4
                if ghoodir == 4:
                    ghoopos_y = ghoopos[1]*8+4
                elif ghoodir == 8:
                    ghoopos_x = ghoopos[0]*8+4
        if ghoolive == 1:
            if ghostmode == 1:
                if (abs(ghoopos_real[0]-pacpos_real[0])+abs(ghoopos_real[1]-pacpos_real[1])) > 65:
                    ghootarx = pacpos[0]
                    ghootary = pacpos[1]
                else:
                    ghootarx = int(time.time()*100000+time.time()*ghootarx*100) % 29
                    ghootary = int(time.time()*100000+time.time()*ghootary*100) % 35
            elif ghostmode == 0:
                ghootarx = 1
                ghootary = 32
        elif ghoolive == -1:
            ghootarx = 14
            ghootary = 17
        else:
            ghootarx = int(time.time()*100000 + time.time()*ghootarx*100) % 29
            ghootary = int(time.time()*100000 + time.time()*ghootary*100) % 35
        ghoofindway = finddir(ghoopos[0],ghoopos[1],ghootarx,ghootary,ghopath,ghoofindway,1,ghoodir,ghoolive)
        if ghoolive >= 0:
            ghoofindway[14][17] = 4
            ghoofindway[13][17] = 8
            ghoofindway[13][16] = 8
            ghoofindway[13][15] = 8
        if (abs(ghoopos[0]*8+4 - ghoopos_real[0])<1.2*ghoospeed*speedset and abs(ghoopos[1]*8+4 - ghoopos_real[1])<1.2*ghoospeed*speedset):
            ghoodir = ghoofindway[ghoopos[0]][ghoopos[1]]
        if (ghoodir == 2 or ghoodir == 8):
            ghoopos_x = ghoopos[0]*8+4
        elif (ghoodir == 4 or ghoodir == 6):
            ghoopos_y = ghoopos[1]*8+4
        if ghoodir == 4:
            if ((ghoopos_x)<8 and ghoopos[1] == 17):#隧道传送
                ghoopos_x = 27*8
                ghoopos[0] = 27
                ghoofindway[ghoopos[0]][ghoopos[1]] = 4
                ghoofindway[ghoopos[0]-1][ghoopos[1]] = 4
            if (ghoopos_real[0])/8-ghoopos[0]<0:#确定坐标
                ghoopos[0] = ghoopos[0]-1
            ghoopos_x = ghoopos_x - 1*ghoospeed*speedset#移动1步
        elif ghoodir == 6:
            if ((ghoopos_x)>27*8-1 and ghoopos[1] == 17):#隧道传送
                ghoopos_x = 8
                ghoopos[0] = 1
                ghoofindway[ghoopos[0]][ghoopos[1]] = 6
                ghoofindway[ghoopos[0]+1][ghoopos[1]] = 6
            if (ghoopos_real[0]+1)/8-(ghoopos[0]+1)>=0:#确定坐标
                ghoopos[0] = ghoopos[0]+1
            ghoopos_x = ghoopos_x + 1*ghoospeed*speedset#移动1步
        elif ghoodir == 2:
            if (ghoopos_real[1]+1)/8-(ghoopos[1]+1)>=0:#确定坐标
                ghoopos[1] = ghoopos[1]+1
            ghoopos_y = ghoopos_y + 1*ghoospeed*speedset#移动1步
        elif ghoodir == 8:
            if ghoopos_real[1]/8-ghoopos[1]<0:#确定坐标
                ghoopos[1] = ghoopos[1]-1
            ghoopos_y = ghoopos_y - 1*ghoospeed*speedset#移动1步
        ghoopos_real[0] = int(ghoopos_x)
        ghoopos_real[1] = int(ghoopos_y)
    #吃豆子
    if eatdot > 0:
        eatdot = eatdot - 1
    if smalldot[pacpos[0]][pacpos[1]] == 1:
        smalldot[pacpos[0]][pacpos[1]] = 0
        mapcond[pacpos[1]][pacpos[0]] = 6
        eatdot = 1
        highscore = highscore + 10
        countlivesscore = countlivesscore + 10
        #ghostpink被抓
        ghopclock = 0
        if ghopcatch == 1:
            ghopdotcount = ghopdotcount + 1
        else:
            ghopdotcount = 0
        #ghostcyan被抓
        ghocclock = 0
        if ghoccatch == 1:
            ghocdotcount = ghocdotcount + 1
        else:
            ghocdotcount = 0
        #ghostorange被抓
        ghooclock = 0
        if ghoocatch == 1:
            ghoodotcount = ghoodotcount + 1
        else:
            ghoodotcount = 0
    elif bigdot[pacpos[0]][pacpos[1]] == 1:
        bigdot[pacpos[0]][pacpos[1]] = 0
        mapcond[pacpos[1]][pacpos[0]] = 6
        eatdot = 3
        #ghostredflee
        if ghorlive >= 0:
            ghorlive = 0
        ghortarx,ghortary = ghocfindtarget(ghorpos,pacdir,pacpos)
        ghorfindway = finddir(ghorpos[0],ghorpos[1],ghortarx,ghortary,ghopath,ghorfindway,0,ghordir,ghorlive)
        if (ghordir == 2 or ghordir == 8):
            ghorpos_x = ghorpos[0]*8+4
        elif (ghordir == 4 or ghordir == 6):
            ghorpos_y = ghorpos[1]*8+4
        #ghostpinkflee
        if ghoplive >= 0:
            ghoplive = 0
        if ghopcatch == 0:
            ghoptarx,ghoptary = ghocfindtarget(ghorpos,pacdir,pacpos)
            ghopfindway = finddir(ghoppos[0],ghoppos[1],ghoptarx,ghoptary,ghopath,ghopfindway,0,ghopdir,ghoplive)
            if (ghopdir == 2 or ghopdir == 8):
                ghoppos_x = ghoppos[0]*8+4
            elif (ghopdir == 4 or ghopdir == 6):
                ghoppos_y = ghoppos[1]*8+4
            ghopdotcount = 0
        elif ghopcatch == 1:
            ghopdotcount = ghopdotcount + 1
        #ghostcyanflee
        if ghoclive >= 0:
            ghoclive = 0
        if ghoccatch == 0:
            ghoctarx,ghoctary = ghocfindtarget(ghorpos,pacdir,pacpos)
            ghocfindway = finddir(ghocpos[0],ghocpos[1],ghoctarx,ghoctary,ghopath,ghocfindway,0,ghocdir,ghoclive)
            if (ghocdir == 2 or ghocdir == 8):
                ghocpos_x = ghocpos[0]*8+4
            elif (ghocdir == 4 or ghocdir == 6):
                ghocpos_y = ghocpos[1]*8+4
            ghocdotcount = 0
        elif ghoccatch == 1:
            ghocdotcount = ghocdotcount + 1
        #ghostorangeflee
        if ghoolive >= 0:
            ghoolive = 0
        if ghoocatch == 0:
            ghootarx,ghootary = ghocfindtarget(ghoopos,pacdir,pacpos)
            ghoofindway = finddir(ghoopos[0],ghoopos[1],ghootarx,ghootary,ghopath,ghoofindway,0,ghoodir,ghoolive)
            if (ghoodir == 2 or ghoodir == 8):
                ghoopos_x = ghoopos[0]*8+4
            elif (ghoodir == 4 or ghoodir == 6):
                ghoopos_y = ghoopos[1]*8+4
            ghoodotcount = 0
        elif ghoocatch == 1:
            ghoodotcount = ghoodotcount + 1 
        killbonus = 1
        highscore = highscore + 50
        countlivesscore = countlivesscore + 50
        if level == 1:
            escapetime = 6*fpsset
        elif (level == 2 or level == 6 or level == 10):
            escapetime = 5*fpsset
        elif level == 3:
            escapetime = 4*fpsset
        elif (level == 4 or level == 14):
            escapetime = 3*fpsset
        elif (level == 5 or level == 7 or level == 8 or level == 11):
            escapetime = 2*fpsset
        elif (level == 9 or level == 12 or level == 13 or level == 15 or level == 16 or level == 18):
            escapetime = 1*fpsset
        else:
            escapetime = 1
    #判断抓住
    if (superpac == 1 and clock%fpsset < (fpsset-3)):
        godmodeonim = Image.fromarray(godmodeonimg)
        img_r, img_g, img_b, img_a = godmodeonim.split()
        bg.paste(godmodeonim,(17*8,2*8),mask = img_a)
    if (superpac == 0 and
       ((pacpos[0] == ghorpos[0] and pacpos[1] == ghorpos[1] and ghorlive == 1) or
        (pacpos[0] == ghoppos[0] and pacpos[1] == ghoppos[1] and ghoplive == 1) or
        (pacpos[0] == ghocpos[0] and pacpos[1] == ghocpos[1] and ghoclive == 1) or
        (pacpos[0] == ghoopos[0] and pacpos[1] == ghoopos[1] and ghoolive == 1))):
        levelcheck = -1
    if escapetime > 0:
        #ghostred
        if (pacpos[0] == ghorpos[0] and pacpos[1] == ghorpos[1] and ghorlive == 0):
            ghorlive = -1
            if (ghordir == 2 or ghordir == 8):
                ghorpos_x = ghorpos[0]*8+4
            elif (ghordir == 4 or ghordir == 6):
                ghorpos_y = ghorpos[1]*8+4
            killbonus,highscore,countlivesscore = killghost(killbonus,highscore,countlivesscore)
            if killbonus == 2:
                bon200imt = bontime1
                bon200x = pacpos[0]*8-6
                bon200y = pacpos[1]*8
            elif killbonus == 3:
                bon400imt = bontime1
                bon400x = pacpos[0]*8-6
                bon400y = pacpos[1]*8
            elif killbonus == 4:
                bon800imt = bontime1
                bon800x = pacpos[0]*8-6
                bon800y = pacpos[1]*8
            elif killbonus == 5:
                bon1600imt = bontime1
                bon1600x = pacpos[0]*8-6
                bon1600y = pacpos[1]*8
        #ghostpink
        if (pacpos[0] == ghoppos[0] and pacpos[1] == ghoppos[1] and ghoplive == 0):
            ghopcatch = 1
            ghoplive = -1
            if (ghopdir == 2 or ghopdir == 8):
                ghoppos_x = ghoppos[0]*8+4
            elif (ghopdir == 4 or ghopdir == 6):
                ghoppos_y = ghoppos[1]*8+4
            killbonus,highscore,countlivesscore = killghost(killbonus,highscore,countlivesscore)
            if killbonus == 2:
                bon200imt = bontime1
                bon200x = pacpos[0]*8-6
                bon200y = pacpos[1]*8
            elif killbonus == 3:
                bon400imt = bontime1
                bon400x = pacpos[0]*8-6
                bon400y = pacpos[1]*8
            elif killbonus == 4:
                bon800imt = bontime1
                bon800x = pacpos[0]*8-6
                bon800y = pacpos[1]*8
            elif killbonus == 5:
                bon1600imt = bontime1
                bon1600x = pacpos[0]*8-6
                bon1600y = pacpos[1]*8
        #ghostcyan
        if (pacpos[0] == ghocpos[0] and pacpos[1] == ghocpos[1] and ghoclive == 0):
            ghoccatch = 1
            ghoclive = -1
            if (ghocdir == 2 or ghocdir == 8):
                ghocpos_x = ghocpos[0]*8+4
            elif (ghocdir == 4 or ghocdir == 6):
                ghocpos_y = ghocpos[1]*8+4
            killbonus,highscore,countlivesscore = killghost(killbonus,highscore,countlivesscore)
            if killbonus == 2:
                bon200imt = bontime1
                bon200x = pacpos[0]*8-6
                bon200y = pacpos[1]*8
            elif killbonus == 3:
                bon400imt = bontime1
                bon400x = pacpos[0]*8-6
                bon400y = pacpos[1]*8
            elif killbonus == 4:
                bon800imt = bontime1
                bon800x = pacpos[0]*8-6
                bon800y = pacpos[1]*8
            elif killbonus == 5:
                bon1600imt = bontime1
                bon1600x = pacpos[0]*8-6
                bon1600y = pacpos[1]*8
        #ghostorange
        if (pacpos[0] == ghoopos[0] and pacpos[1] == ghoopos[1] and ghoolive == 0):
            ghoocatch = 1
            ghoolive = -1
            if (ghoodir == 2 or ghoodir == 8):
                ghoopos_x = ghoopos[0]*8+4
            elif (ghoodir == 4 or ghoodir == 6):
                ghoopos_y = ghoopos[1]*8+4
            killbonus,highscore,countlivesscore = killghost(killbonus,highscore,countlivesscore)
            if killbonus == 2:
                bon200imt = bontime1
                bon200x = pacpos[0]*8-6
                bon200y = pacpos[1]*8
            elif killbonus == 3:
                bon400imt = bontime1
                bon400x = pacpos[0]*8-6
                bon400y = pacpos[1]*8
            elif killbonus == 4:
                bon800imt = bontime1
                bon800x = pacpos[0]*8-6
                bon800y = pacpos[1]*8
            elif killbonus == 5:
                bon1600imt = bontime1
                bon1600x = pacpos[0]*8-6
                bon1600y = pacpos[1]*8
    #画计时器
    timer = int(clock/fpsset)
    if timer == 20000: timer = 10000
    if timer < 10:
        timer_str = '000'+str(timer)
    elif timer < 100:
        timer_str = '00'+str(timer)
    elif timer < 1000:
        timer_str = '0'+str(timer)
    elif timer < 10000:
        timer_str = str(timer)
    else:
        timer_str = '9999'
    for i in range(0,4):
        if timer_str[i] == '0':
            img_r, img_g, img_b, img_a = num0im.split()
            bg.paste(num0im,((i+2)*8,1*8),mask = img_a)
        elif timer_str[i] == '1':
            img_r, img_g, img_b, img_a = num1im.split()
            bg.paste(num1im,((i+2)*8,1*8),mask = img_a)
        elif timer_str[i] == '2':
            img_r, img_g, img_b, img_a = num2im.split()
            bg.paste(num2im,((i+2)*8,1*8),mask = img_a)
        elif timer_str[i] == '3':
            img_r, img_g, img_b, img_a = num3im.split()
            bg.paste(num3im,((i+2)*8,1*8),mask = img_a)
        elif timer_str[i] == '4':
            img_r, img_g, img_b, img_a = num4im.split()
            bg.paste(num4im,((i+2)*8,1*8),mask = img_a)
        elif timer_str[i] == '5':
            img_r, img_g, img_b, img_a = num5im.split()
            bg.paste(num5im,((i+2)*8,1*8),mask = img_a)
        elif timer_str[i] == '6':
            img_r, img_g, img_b, img_a = num6im.split()
            bg.paste(num6im,((i+2)*8,1*8),mask = img_a)
        elif timer_str[i] == '7':
            img_r, img_g, img_b, img_a = num7im.split()
            bg.paste(num7im,((i+2)*8,1*8),mask = img_a)
        elif timer_str[i] == '8':
            img_r, img_g, img_b, img_a = num8im.split()
            bg.paste(num8im,((i+2)*8,1*8),mask = img_a)
        elif timer_str[i] == '9':
            img_r, img_g, img_b, img_a = num9im.split()
            bg.paste(num9im,((i+2)*8,1*8),mask = img_a)
    #画关卡数
    if level < 10:
        level_str = '00'+str(level)
    elif level < 100:
        level_str = '0'+str(level)
    elif level < 1000:
        level_str = str(level)
    else:
        level_str = '999'
        level = 999
    for i in range(0,3):
        if level_str[i] == '0':
            img_r, img_g, img_b, img_a = num0im.split()
            bg.paste(num0im,((i+23)*8,1*8),mask = img_a)
        elif level_str[i] == '1':
            img_r, img_g, img_b, img_a = num1im.split()
            bg.paste(num1im,((i+23)*8,1*8),mask = img_a)
        elif level_str[i] == '2':
            img_r, img_g, img_b, img_a = num2im.split()
            bg.paste(num2im,((i+23)*8,1*8),mask = img_a)
        elif level_str[i] == '3':
            img_r, img_g, img_b, img_a = num3im.split()
            bg.paste(num3im,((i+23)*8,1*8),mask = img_a)
        elif level_str[i] == '4':
            img_r, img_g, img_b, img_a = num4im.split()
            bg.paste(num4im,((i+23)*8,1*8),mask = img_a)
        elif level_str[i] == '5':
            img_r, img_g, img_b, img_a = num5im.split()
            bg.paste(num5im,((i+23)*8,1*8),mask = img_a)
        elif level_str[i] == '6':
            img_r, img_g, img_b, img_a = num6im.split()
            bg.paste(num6im,((i+23)*8,1*8),mask = img_a)
        elif level_str[i] == '7':
            img_r, img_g, img_b, img_a = num7im.split()
            bg.paste(num7im,((i+23)*8,1*8),mask = img_a)
        elif level_str[i] == '8':
            img_r, img_g, img_b, img_a = num8im.split()
            bg.paste(num8im,((i+23)*8,1*8),mask = img_a)
        elif level_str[i] == '9':
            img_r, img_g, img_b, img_a = num9im.split()
            bg.paste(num9im,((i+23)*8,1*8),mask = img_a)
    #画豆子
    for i in range(0,28):
        for j in range(0,34):
            if smalldot[i][j] == 1:
                img_r, img_g, img_b, img_a = smalldotim.split()
                bg.paste(smalldotim,(i*8,j*8),mask = img_a)
            if (bigdot[i][j] == 1 and clock%fpsset < fpsset*0.5):
                img_r, img_g, img_b, img_a = bigdotim.split()
                bg.paste(bigdotim,(i*8,j*8),mask = img_a)
    #画奖励
    if bonuscheck > 0:
        if level == 1:
            bonusim = Image.fromarray(bonus1img)
        elif level < 3:
            bonusim = Image.fromarray(bonus2img)
        elif level < 5:
            bonusim = Image.fromarray(bonus3img)
        elif level < 7:
            bonusim = Image.fromarray(bonus4img)
        elif level < 9:
            bonusim = Image.fromarray(bonus5img)
        elif level < 11:
            bonusim = Image.fromarray(bonus6img)
        elif level < 13:
            bonusim = Image.fromarray(bonus7img)
        else:
            bonusim = Image.fromarray(bonus8img)
        img_r, img_g, img_b, img_a = bonusim.split()
        bg.paste(bonusim,(13*8,19*8+4),mask = img_a)
    #画奖励分数
    if bon100imt > 0:
        img_r, img_g, img_b, img_a = bon100im.split()
        bg.paste(bon100im,(13*8-2,20*8),mask = img_a)
    if bon300imt > 0:
        img_r, img_g, img_b, img_a = bon300im.split()
        bg.paste(bon300im,(13*8-2,20*8),mask = img_a)
    if bon500imt > 0:
        img_r, img_g, img_b, img_a = bon500im.split()
        bg.paste(bon500im,(13*8-2,20*8),mask = img_a)
    if bon700imt > 0:
        img_r, img_g, img_b, img_a = bon700im.split()
        bg.paste(bon700im,(13*8-2,20*8),mask = img_a)
    if bon1000imt > 0:
        img_r, img_g, img_b, img_a = bon1000im.split()
        bg.paste(bon1000im,(13*8-2,20*8),mask = img_a)
    if bon2000imt > 0:
        img_r, img_g, img_b, img_a = bon2000im.split()
        bg.paste(bon2000im,(13*8-2,20*8),mask = img_a)
    if bon3000imt > 0:
        img_r, img_g, img_b, img_a = bon3000im.split()
        bg.paste(bon3000im,(13*8-2,20*8),mask = img_a)
    if bon5000imt > 0:
        img_r, img_g, img_b, img_a = bon5000im.split()
        bg.paste(bon5000im,(13*8-2,20*8),mask = img_a)
    if bon200imt > 0:
        img_r, img_g, img_b, img_a = bon200im.split()
        bg.paste(bon200im,(bon200x,bon200y),mask = img_a)
    if bon400imt > 0:
        img_r, img_g, img_b, img_a = bon400im.split()
        bg.paste(bon400im,(bon400x,bon400y),mask = img_a)
    if bon800imt > 0:
        img_r, img_g, img_b, img_a = bon800im.split()
        bg.paste(bon800im,(bon800x,bon800y),mask = img_a)
    if bon1600imt > 0:
        img_r, img_g, img_b, img_a = bon1600im.split()
        bg.paste(bon1600im,(bon1600x,bon1600y),mask = img_a)
    #画pacman
    if (superpac == 0 or (superpac == 1 and clock%fpsset < (fpsset-3))):
        if clock%9 <3:
            pacman = Image.fromarray(pacman0img)
        elif clock%9 <6:
            pacman = Image.fromarray(pacman1img)
        else:
            pacman = Image.fromarray(pacman2img)
        if pacdir == 4:
            pacman_turn = pacman.rotate(0)
        elif pacdir == 2:
            pacman_turn = pacman.rotate(90)
        elif pacdir == 6:
            pacman_turn = pacman.rotate(180)
        elif pacdir == 8:
            pacman_turn = pacman.rotate(270)
        img_r, img_g, img_b, img_a = pacman_turn.split()
        bg.paste(pacman_turn,(pacpos_real[0]-8,pacpos_real[1]-8),mask = img_a)
    #画ghostred
    if (clock%12 <6):
        ghorim = Image.fromarray(ghored0img)
        ghorflee = Image.fromarray(ghoflee0img)
        ghorblink = Image.fromarray(ghoblink0img)
    else:
        ghorim = Image.fromarray(ghored1img)
        ghorflee = Image.fromarray(ghoflee1img)
        ghorblink = Image.fromarray(ghoblink1img)
    if ghordir == 4:
        ghor_eye = Image.fromarray(ghoeyeleftimg)
    elif ghordir == 2:
        ghor_eye = Image.fromarray(ghoeyedownimg)
    elif ghordir == 6:
        ghor_eye = Image.fromarray(ghoeyerightimg)
    elif ghordir == 8:
        ghor_eye = Image.fromarray(ghoeyeupimg)
    if ghorlive == 1:
        img_r, img_g, img_b, img_a = ghorim.split()
        bg.paste(ghorim,(ghorpos_real[0]-8,ghorpos_real[1]-8),mask = img_a)
        img_r, img_g, img_b, img_a = ghor_eye.split()
        bg.paste(ghor_eye,(ghorpos_real[0]-8,ghorpos_real[1]-8),mask = img_a)
    elif ghorlive == 0:
        if ((1*fpsset/6-1 < escapetime and escapetime < 2*fpsset/6+1) or  (3*fpsset/6-1 < escapetime and escapetime < 4*fpsset/6+1) or
            (5*fpsset/6-1 < escapetime and escapetime < 6*fpsset/6+1) or  (7*fpsset/6-1 < escapetime and escapetime < 8*fpsset/6+1) or
            9*fpsset/6-1 < escapetime):
            img_r, img_g, img_b, img_a = ghorflee.split()
            bg.paste(ghorflee,(ghorpos_real[0]-8,ghorpos_real[1]-8),mask = img_a)
        else:
            img_r, img_g, img_b, img_a = ghorblink.split()
            bg.paste(ghorblink,(ghorpos_real[0]-8,ghorpos_real[1]-8),mask = img_a)
    elif ghorlive == -1:
        img_r, img_g, img_b, img_a = ghor_eye.split()
        bg.paste(ghor_eye,(ghorpos_real[0]-8,ghorpos_real[1]-8),mask = img_a)
    #画ghostpink
    if (clock%12 <6):
        ghopim = Image.fromarray(ghopink0img)
        ghopflee = Image.fromarray(ghoflee0img)
        ghopblink = Image.fromarray(ghoblink0img)
    else:
        ghopim = Image.fromarray(ghopink1img)
        ghopflee = Image.fromarray(ghoflee1img)
        ghopblink = Image.fromarray(ghoblink1img)
    if ghopdir == 4:
        ghop_eye = Image.fromarray(ghoeyeleftimg)
    elif ghopdir == 2:
        ghop_eye = Image.fromarray(ghoeyedownimg)
    elif ghopdir == 6:
        ghop_eye = Image.fromarray(ghoeyerightimg)
    elif ghopdir == 8:
        ghop_eye = Image.fromarray(ghoeyeupimg)
    if ghoplive == 1:
        img_r, img_g, img_b, img_a = ghopim.split()
        bg.paste(ghopim,(ghoppos_real[0]-8,ghoppos_real[1]-8),mask = img_a)
        img_r, img_g, img_b, img_a = ghop_eye.split()
        bg.paste(ghop_eye,(ghoppos_real[0]-8,ghoppos_real[1]-8),mask = img_a)
    elif ghoplive == 0:
        if ((1*fpsset/6-1 < escapetime and escapetime < 2*fpsset/6+1) or  (3*fpsset/6-1 < escapetime and escapetime < 4*fpsset/6+1) or
            (5*fpsset/6-1 < escapetime and escapetime < 6*fpsset/6+1) or  (7*fpsset/6-1 < escapetime and escapetime < 8*fpsset/6+1) or
            9*fpsset/6-1 < escapetime):
            img_r, img_g, img_b, img_a = ghopflee.split()
            bg.paste(ghopflee,(ghoppos_real[0]-8,ghoppos_real[1]-8),mask = img_a)
        else:
            img_r, img_g, img_b, img_a = ghopblink.split()
            bg.paste(ghopblink,(ghoppos_real[0]-8,ghoppos_real[1]-8),mask = img_a)
    elif ghoplive == -1:
        img_r, img_g, img_b, img_a = ghop_eye.split()
        bg.paste(ghop_eye,(ghoppos_real[0]-8,ghoppos_real[1]-8),mask = img_a)
    #画ghostcyan
    if (clock%12 <6):
        ghocim = Image.fromarray(ghocyan0img)
        ghocflee = Image.fromarray(ghoflee0img)
        ghocblink = Image.fromarray(ghoblink0img)
    else:
        ghocim = Image.fromarray(ghocyan1img)
        ghocflee = Image.fromarray(ghoflee1img)
        ghocblink = Image.fromarray(ghoblink1img)
    if ghocdir == 4:
        ghoc_eye = Image.fromarray(ghoeyeleftimg)
    elif ghocdir == 2:
        ghoc_eye = Image.fromarray(ghoeyedownimg)
    elif ghocdir == 6:
        ghoc_eye = Image.fromarray(ghoeyerightimg)
    elif ghocdir == 8:
        ghoc_eye = Image.fromarray(ghoeyeupimg)
    if ghoclive == 1:
        img_r, img_g, img_b, img_a = ghocim.split()
        bg.paste(ghocim,(ghocpos_real[0]-8,ghocpos_real[1]-8),mask = img_a)
        img_r, img_g, img_b, img_a = ghoc_eye.split()
        bg.paste(ghoc_eye,(ghocpos_real[0]-8,ghocpos_real[1]-8),mask = img_a)
    elif ghoclive == 0:
        if ((1*fpsset/6-1 < escapetime and escapetime < 2*fpsset/6+1) or  (3*fpsset/6-1 < escapetime and escapetime < 4*fpsset/6+1) or
            (5*fpsset/6-1 < escapetime and escapetime < 6*fpsset/6+1) or  (7*fpsset/6-1 < escapetime and escapetime < 8*fpsset/6+1) or
            9*fpsset/6-1 < escapetime):
            img_r, img_g, img_b, img_a = ghocflee.split()
            bg.paste(ghocflee,(ghocpos_real[0]-8,ghocpos_real[1]-8),mask = img_a)
        else:
            img_r, img_g, img_b, img_a = ghocblink.split()
            bg.paste(ghocblink,(ghocpos_real[0]-8,ghocpos_real[1]-8),mask = img_a)
    elif ghoclive == -1:
        img_r, img_g, img_b, img_a = ghoc_eye.split()
        bg.paste(ghoc_eye,(ghocpos_real[0]-8,ghocpos_real[1]-8),mask = img_a)
    #画ghostorange
    if (clock%12 <6):
        ghooim = Image.fromarray(ghoorange0img)
        ghooflee = Image.fromarray(ghoflee0img)
        ghooblink = Image.fromarray(ghoblink0img)
    else:
        ghooim = Image.fromarray(ghoorange1img)
        ghooflee = Image.fromarray(ghoflee1img)
        ghooblink = Image.fromarray(ghoblink1img)
    if ghoodir == 4:
        ghoo_eye = Image.fromarray(ghoeyeleftimg)
    elif ghoodir == 2:
        ghoo_eye = Image.fromarray(ghoeyedownimg)
    elif ghoodir == 6:
        ghoo_eye = Image.fromarray(ghoeyerightimg)
    elif ghoodir == 8:
        ghoo_eye = Image.fromarray(ghoeyeupimg)
    if ghoolive == 1:
        img_r, img_g, img_b, img_a = ghooim.split()
        bg.paste(ghooim,(ghoopos_real[0]-8,ghoopos_real[1]-8),mask = img_a)
        img_r, img_g, img_b, img_a = ghoo_eye.split()
        bg.paste(ghoo_eye,(ghoopos_real[0]-8,ghoopos_real[1]-8),mask = img_a)
    elif ghoolive == 0:
        if ((1*fpsset/6-1 < escapetime and escapetime < 2*fpsset/6+1) or  (3*fpsset/6-1 < escapetime and escapetime < 4*fpsset/6+1) or
            (5*fpsset/6-1 < escapetime and escapetime < 6*fpsset/6+1) or  (7*fpsset/6-1 < escapetime and escapetime < 8*fpsset/6+1) or
            9*fpsset/6-1 < escapetime):
            img_r, img_g, img_b, img_a = ghooflee.split()
            bg.paste(ghooflee,(ghoopos_real[0]-8,ghoopos_real[1]-8),mask = img_a)
        else:
            img_r, img_g, img_b, img_a = ghooblink.split()
            bg.paste(ghooblink,(ghoopos_real[0]-8,ghoopos_real[1]-8),mask = img_a)
    elif ghoolive == -1:
        img_r, img_g, img_b, img_a = ghoo_eye.split()
        bg.paste(ghoo_eye,(ghoopos_real[0]-8,ghoopos_real[1]-8),mask = img_a)
    #过关
    if finalpause > 1: finalpause = finalpause - 1
    if levelcheck != 0:
        if levelcheck == 1:
            switch1 = 0
            switch2 = 0
            level = level + 1
            temp = bonusdraw[7]
            bonusdraw[7] = bonusdraw[6]
            bonusdraw[6] = bonusdraw[5]
            bonusdraw[5] = bonusdraw[4]
            bonusdraw[4] = bonusdraw[3]
            bonusdraw[3] = bonusdraw[2]
            bonusdraw[2] = bonusdraw[1]
            bonusdraw[1] = bonusdraw[0]
            bonuscheck = 0
            if level < 3:
                bonusdraw[0] = 2
            elif level < 5:
                bonusdraw[0] = 3
            elif level < 7:
                bonusdraw[0] = 4
            elif level < 9:
                bonusdraw[0] = 5
            elif level < 11:
                bonusdraw[0] = 6
            elif level < 13:
                bonusdraw[0] = 7
            else:
                bonusdraw[0] = 8
            prescore = highscore
            for i in range(0,34):
                for j in range(0,28):
                    mapcond[i][j] = mapcondori[i][j]
        if levelcheck == -1:
            if lives > 0:
                lives = lives - 1
            else:
                for i in range(0,34):
                    for j in range(0,28):
                        mapcond[i][j] = mapcondori[i][j]
                highscore = 0
                switch1 = 0
                switch2 = 0
                totalrestart = 1
                lives = 3
                countlivesscore = 0
                bonus = np.array([0,0,0,0,0,0,0,0])
                bonusdraw = np.array([0,0,0,0,0,0,0,0])
                bonusdraw[0] = 1
                #画gameover
                img_r, img_g, img_b, img_a = gameov.split()
                bg.paste(gameov,(9*8,20*8),mask = img_a)
        levelcheck = 0
        levelwaittime = 3*fpsset
        pacpos_x = 14*8
        pacpos_y = 26*8+4
        pacpos = np.array([14,26])
        pacpos_real = np.array([14*8,26*8+4])
        kpress = 0
        r.content = ''
        pacdir == 4
        pacturn = 1
        #ghostred
        ghordir = 4
        ghorfindway[13][14] = 4
        ghorpos_x = 13*8+4
        ghorpos_y = 14*8+4
        ghorpos_real = np.array([int(ghorpos_x),int(ghorpos_y)])
        ghorpos = np.array([13,14])
        ghorspeed = 0.75
        ghorlive = 1
        ghortarx = 26
        ghortary = 4
        #ghostpink
        ghoppos_x = 13*8+4
        ghoppos_y = 17*8+4
        ghoppos_real = np.array([int(ghoppos_x),int(ghoppos_y)])
        ghoppos = np.array([13,17])
        ghopspeed = 0.75
        ghopdir = 6
        ghoplive = 1
        ghopcatch = 0
        ghopdotcount = 0
        ghopclock = 0
        ghoptarx = 1
        ghoptary = 4
        #ghostcyan
        ghocpos_x = 12*8+4
        ghocpos_y = 17*8+4
        ghocpos_real = np.array([int(ghocpos_x),int(ghocpos_y)])
        ghocpos = np.array([12,17])
        ghocspeed = 0.75
        ghocdir = 6
        ghoclive = 1
        ghocsetout = 0
        ghoccatch = 0
        ghocdotcount = 0
        ghocclock = 0
        ghocfindway = np.zeros((28, 34), dtype=int)
        ghoctarx = 26
        ghoctary = 32
        #ghostorange
        ghoopos_x = 14*8+4
        ghoopos_y = 17*8+4
        ghoopos_real = np.array([int(ghoopos_x),int(ghoopos_y)])
        ghoopos = np.array([14,17])
        ghoospeed = 0.75
        ghoodir = 4
        ghoolive = 1
        ghoosetout = 0
        ghoocatch = 0
        ghoodotcount = 0
        ghooclock = 0
        ghoofindway = np.zeros((28, 34), dtype=int)
        ghootarx = 1
        ghootary = 32
        clock = 0
        escapetime = 0
        finalpause = 2
        killbonus = 0
        ghostmode = 1#0-wander,1-chase
        ghoclock = 0
        bonuscheck = 0
        bonustime = 0
    #画分数
    if highscore < 10:
        highscore_str = '        '+str(highscore)
    elif highscore < 100:
        highscore_str = '       '+str(highscore)
    elif highscore < 1000:
        highscore_str = '      '+str(highscore)
    elif highscore < 10000:
        highscore_str = '     '+str(highscore)
    elif highscore < 100000:
        highscore_str = '    '+str(highscore)
    elif highscore < 1000000:
        highscore_str = '   '+str(highscore)
    elif highscore < 10000000:
        highscore_str = '  '+str(highscore)
    elif highscore < 100000000:
        highscore_str = ' '+str(highscore)
    elif highscore < 1000000000:
        highscore_str = str(highscore)
    else:
        highscore_str = '999999999'
        highscore = 999999999
    for i in range(0,9):
        if highscore_str[i] == '0':
            img_r, img_g, img_b, img_a = num0im.split()
            bg.paste(num0im,((i+9)*8,1*8),mask = img_a)
        elif highscore_str[i] == '1':
            img_r, img_g, img_b, img_a = num1im.split()
            bg.paste(num1im,((i+9)*8,1*8),mask = img_a)
        elif highscore_str[i] == '2':
            img_r, img_g, img_b, img_a = num2im.split()
            bg.paste(num2im,((i+9)*8,1*8),mask = img_a)
        elif highscore_str[i] == '3':
            img_r, img_g, img_b, img_a = num3im.split()
            bg.paste(num3im,((i+9)*8,1*8),mask = img_a)
        elif highscore_str[i] == '4':
            img_r, img_g, img_b, img_a = num4im.split()
            bg.paste(num4im,((i+9)*8,1*8),mask = img_a)
        elif highscore_str[i] == '5':
            img_r, img_g, img_b, img_a = num5im.split()
            bg.paste(num5im,((i+9)*8,1*8),mask = img_a)
        elif highscore_str[i] == '6':
            img_r, img_g, img_b, img_a = num6im.split()
            bg.paste(num6im,((i+9)*8,1*8),mask = img_a)
        elif highscore_str[i] == '7':
            img_r, img_g, img_b, img_a = num7im.split()
            bg.paste(num7im,((i+9)*8,1*8),mask = img_a)
        elif highscore_str[i] == '8':
            img_r, img_g, img_b, img_a = num8im.split()
            bg.paste(num8im,((i+9)*8,1*8),mask = img_a)
        elif highscore_str[i] == '9':
            img_r, img_g, img_b, img_a = num9im.split()
            bg.paste(num9im,((i+9)*8,1*8),mask = img_a)
    #画寻路路线
    showarr = drawghostway(showarr,ghorfindway,ghopfindway,ghocfindway,ghoofindway,clock,fpsset,
                           ghortarx,ghortary,ghoptarx,ghoptary,ghoctarx,ghoctary,ghootarx,ghootary,dotcount)
    #画说明or奖励
    if ((level == 1 and clock%(fpsset*2) < fpsset) or (level > 1 and clock%(fpsset*4) > fpsset*3)):
        bg.paste(Image.fromarray(memo1img),(0*8+4,34*8+4))
        bg.paste(Image.fromarray(memo2img),(13*8+4,34*8+4))
    else:
        pacliveim = Image.fromarray(pacman1img)
        pacliveimg = pacliveim.rotate(180)
        img_r, img_g, img_b, img_a = pacliveimg.split()
        bg.paste(pacliveimg,(1*8+4,34*8),mask = img_a)
        chenghaoim = Image.fromarray(chenghaoimg)
        img_r, img_g, img_b, img_a = chenghaoim.split()
        bg.paste(chenghaoim,(4*8,34*8+4),mask = img_a)
        #画命数
        if lives < 10:
            lives_str = str(lives)+'   '
        elif lives < 100:
            lives_str = str(lives)+'  '
        elif lives < 1000:
            lives_str = str(lives)+' '
        elif lives < 10000:
            lives_str = str(lives)
        else:
            lives_str = '9999'
            lives = 9999
        for i in range(0,4):
            if lives_str[i] == '0':
                img_r, img_g, img_b, img_a = num0im.split()
                bg.paste(num0im,((i+6)*8,34*8+4),mask = img_a)
            elif lives_str[i] == '1':
                img_r, img_g, img_b, img_a = num1im.split()
                bg.paste(num1im,((i+6)*8,34*8+4),mask = img_a)
            elif lives_str[i] == '2':
                img_r, img_g, img_b, img_a = num2im.split()
                bg.paste(num2im,((i+6)*8,34*8+4),mask = img_a)
            elif lives_str[i] == '3':
                img_r, img_g, img_b, img_a = num3im.split()
                bg.paste(num3im,((i+6)*8,34*8+4),mask = img_a)
            elif lives_str[i] == '4':
                img_r, img_g, img_b, img_a = num4im.split()
                bg.paste(num4im,((i+6)*8,34*8+4),mask = img_a)
            elif lives_str[i] == '5':
                img_r, img_g, img_b, img_a = num5im.split()
                bg.paste(num5im,((i+6)*8,34*8+4),mask = img_a)
            elif lives_str[i] == '6':
                img_r, img_g, img_b, img_a = num6im.split()
                bg.paste(num6im,((i+6)*8,34*8+4),mask = img_a)
            elif lives_str[i] == '7':
                img_r, img_g, img_b, img_a = num7im.split()
                bg.paste(num7im,((i+6)*8,34*8+4),mask = img_a)
            elif lives_str[i] == '8':
                img_r, img_g, img_b, img_a = num8im.split()
                bg.paste(num8im,((i+6)*8,34*8+4),mask = img_a)
            elif lives_str[i] == '9':
                img_r, img_g, img_b, img_a = num9im.split()
                bg.paste(num9im,((i+6)*8,34*8+4),mask = img_a)
        #画奖励
        for i in range(0,8):
            if bonusdraw[i] == 1:
                img_r, img_g, img_b, img_a = bonus1im.split()
                bg.paste(bonus1im,((i*2+10)*8+6,34*8),mask = img_a)
            elif bonusdraw[i] == 2:
                img_r, img_g, img_b, img_a = bonus2im.split()
                bg.paste(bonus2im,((i*2+10)*8+6,34*8),mask = img_a)
            elif bonusdraw[i] == 3:
                img_r, img_g, img_b, img_a = bonus3im.split()
                bg.paste(bonus3im,((i*2+10)*8+6,34*8),mask = img_a)
            elif bonusdraw[i] == 4:
                img_r, img_g, img_b, img_a = bonus4im.split()
                bg.paste(bonus4im,((i*2+10)*8+6,34*8),mask = img_a)
            elif bonusdraw[i] == 5:
                img_r, img_g, img_b, img_a = bonus5im.split()
                bg.paste(bonus5im,((i*2+10)*8+6,34*8),mask = img_a)
            elif bonusdraw[i] == 6:
                img_r, img_g, img_b, img_a = bonus6im.split()
                bg.paste(bonus6im,((i*2+10)*8+6,34*8),mask = img_a)
            elif bonusdraw[i] == 7:
                img_r, img_g, img_b, img_a = bonus7im.split()
                bg.paste(bonus7im,((i*2+10)*8+6,34*8),mask = img_a)
            elif bonusdraw[i] == 8:
                img_r, img_g, img_b, img_a = bonus8im.split()
                bg.paste(bonus8im,((i*2+10)*8+6,34*8),mask = img_a)
    #后处理
    if kpress != 0:
        kpress = 0
        r.content = ''
    if totalrestart == 1:
        totalrestart = 0
        level = 1
    #输出tag
    bg_np = np.array(bg)
    cv.imshow("pacman-opencv.ver",cv.resize(bg_np, (0, 0), fx=rsz, fy=rsz, interpolation=cv.INTER_CUBIC))
    if finalpause == 1:
        finalpause = 0
        ttime2 = time.time()
        while (time.time() - ttime2 < 3000/1000): framewait = 1
    cv.waitKey(3)
cv.destroyAllWindows()
